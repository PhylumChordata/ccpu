#include <vga.h>
#include "z80run.h"

#define PASS_COLOR COLOR(COLOR_WHITE, COLOR_GREEN)
#define FAIL_COLOR COLOR(COLOR_WHITE, COLOR_RED)

#define TEST_COUNT 32u8

u8 test_number;


u8 get_test_number_row(u8 n) {
    return n >> 4u8;
}

u8 get_test_number_col(u8 n) {
    return (n & 0xfu8) * 4u8;
}

u8 ok() {
    u8 r = get_test_number_row(test_number);
    u8 c = get_test_number_col(test_number);
    u8 *p = (u8*)vga_color_seg + VGA_OFFSET(c, r);
    *p = PASS_COLOR;
    p += 1u8;
    *p = PASS_COLOR;
    p += 1u8;
    *p = PASS_COLOR;
    p += 1u8;
    *p = PASS_COLOR;
    p += 1u8;
}

u8 fail() {
    u8 r = get_test_number_row(test_number);
    u8 c = get_test_number_col(test_number);
    u8 *p = (u8*)vga_color_seg + VGA_OFFSET(c, r);
    *p = FAIL_COLOR;
    p += 1u8;
    *p = FAIL_COLOR;
    p += 1u8;
    *p = FAIL_COLOR;
    p += 1u8;
    *p = FAIL_COLOR;
    p += 1u8;
}

u8 draw_test_numbers() {
    u8 i = 0u8;
    for (; i != TEST_COUNT; i += 1u8) {
        u8 r = get_test_number_row(i);
        u8 c = get_test_number_col(i);
        vga_put_decimal_u16(c, r, (u16)i);
    }
}
#define FLAG_C  1u8
#define FLAG_N  2u8
#define FLAG_P  4u8
#define FLAG_H  0x10u8
#define FLAG_Z  0x40u8
#define FLAG_S  0x80u8

#define HALT 0x76u8
import u16 z80_hl;
import u16 z80_de;
import u16 z80_bc;
import u16 z80_ix;
import u16 z80_iy;
import u16 z80_sp;

import u8 z80_f;
import u8 z80_a;
import u8 z80_c;
import u8 z80_b;
import u8 z80_e;
import u8 z80_d;
import u8 z80_l;
import u8 z80_h;

#define ASSERT(b) if (!(b)) { fail(); return; }

u8 test_copy_reg() {
    test_number = 0u8;
    z80_a = 0xccu8;
    z80_b = 0xddu8;
    z80run({0x47u8, HALT}); // ld b, a
    ASSERT(z80_b == 0xccu8);

    z80_h = 0x5au8;
    z80run({0x7cu8, HALT}); // ld a, h
    ASSERT(z80_a == 0x5au8);
    ok();
}

u8 test_copy_r_indir() {
    test_number = 1u8;
    u8 var = 0x89u8;
    z80_hl = (u16)&var;
    z80_e = 0x00u8;
    z80run({0x5eu8, HALT}); // ld e, (hl)
    ASSERT(z80_e == 0x89u8);

    u32 var32 = 0x12345678u32;
    z80_c = 0x00u8;
    z80_d = 0x00u8;
    z80_ix = (u16)&var32 - 50u16;
    z80_iy = (u16)&var32 + 15u16;
    z80run({
        // ld c, (ix + 50)
        0xddu8, 0x4eu8, 50u8,
        // ld e, c
        0x59u8,
        // ld d, (iy - 14)
        0xfdu8, 0x56u8, (u8)-14s8,
        HALT
    });
    ASSERT(z80_c == 0x78u8);
    ASSERT(z80_e == 0x78u8);
    ASSERT(z80_d == 0x56u8);
    ok();
}

u8 test_store_indir_r() {
    test_number = 2u8;
    u8 dest1 = 0x00u8;
    u16 dest2 = 0x0000u16;
    z80_hl = (u16)&dest1;
    z80_c = 0x24u8;
    z80_d = 0xf9u8;
    z80_a = 0x42u8;
    z80_ix = (u16)&dest2 - 18u16;
    z80_iy = (u16)&dest2 + 100u16;
    z80run({
        // ld (hl), c
        0x71u8,
        // ld (ix + 19), d
        0xddu8, 0x72u8, 19u8,
        // ld (iy - 100), a
        0xfdu8, 0x77u8, (u8)-100s8,
        HALT
    });
    ASSERT(dest1 == 0x24u8);
    ASSERT(dest2 == 0xf942u16);
    z80_bc = (u16)&dest1;
    z80_de = (u16)&dest2 + 1u16;
    z80_a = 0xbcu8;
    z80run({
        // ld (bc), a
        0x02u8,
        HALT
    });
    ASSERT(dest1 == 0xbcu8);
    z80_a = 0xdeu8;
    z80run({
        // ld (de), a
        0x12u8,
        HALT
    });
    ASSERT(dest2 == 0xde42u16);
    ok();
}

u8 test_store_indir_imm() {
    test_number = 3u8;
    u8 dest1 = 0u8;
    u16 dest2 = 0u16;
    z80_hl = (u16)&dest1;
    z80_ix = (u16)&dest2 + 18u16;
    z80_iy = (u16)&dest2 - 100u16;
    z80run({
        // ld (hl), 0x33
        0x36u8, 0x33u8,
        // ld (ix - 18), 0x44
        0xddu8, 0x36u8, (u8)-18s8, 0x44u8,
        // ld (iy + 101), 0x55
        0xfdu8, 0x36u8, 101u8, 0x55u8,
        HALT
    });
    ASSERT(dest1 == 0x33u8);
    ASSERT(dest2 == 0x5544u16);
    ok();
}

u8 test_store_reg_imm() {
    test_number = 4u8;
    z80_a = 0u8;
    z80_b = 0u8;
    z80_c = 0u8;
    z80_d = 0u8;
    z80_e = 0u8;
    z80_h = 0u8;
    z80_l = 0u8;
    z80run({
        // ld a, 0x11
        0x3eu8, 0x11u8,
        // ld b, 0x22
        0x06u8, 0x22u8,
        // ld c, 0x33
        0x0eu8, 0x33u8,
        // ld d, 0x44
        0x16u8, 0x44u8,
        // ld e, 0x55
        0x1eu8, 0x55u8,
        // ld h, 0x66
        0x26u8, 0x66u8,
        // ld l, 0x77
        0x2eu8, 0x77u8,
        HALT
    });
    ASSERT(z80_a == 0x11u8);
    ASSERT(z80_b == 0x22u8);
    ASSERT(z80_c == 0x33u8);
    ASSERT(z80_d == 0x44u8);
    ASSERT(z80_e == 0x55u8);
    ASSERT(z80_h == 0x66u8);
    ASSERT(z80_l == 0x77u8);
    ok();
}

struct Opcode8WithAddress {
    u8 opcode;
    u8 *src;
    u8 halt;
};

struct Opcode16WithAddress {
    u8 prefix;
    u8 opcode;
    u8 *src;
    u8 halt;
};

u8 test_ld_a_indir_imm16() {
    test_number = 5u8;
    u8 src = 0x67u8;
    z80_a = 0u8;
    struct Opcode8WithAddress code;
    code.opcode = 0x3au8; // ld a, (imm16)
    code.src = &src;
    code.halt = HALT;
    z80run((u8*)&code);
    ASSERT(z80_a == 0x67u8);

    z80_a = 0x12u8;
    code.opcode = 0x32u8; // ld (imm16), a
    z80run((u8*)&code);
    ASSERT(src == 0x12u8);
    ok();
}

u8 test_ld_a_indir_bcde() {
    test_number = 6u8;
    u16 src = 0x1234u16;
    z80_a = 0u8;
    z80_bc = (u16)&src;
    z80_de = (u16)&src + 1u16;
    z80run({
        // ld a, (bc)
        0x0au8,
        HALT
    });
    ASSERT(z80_a == 0x34u8);
    z80run({
        // ld a, (de)
        0x1au8,
        HALT
    });
    ASSERT(z80_a == 0x12u8);
    ok();
}

u8 test_arithm8_add() {
    test_number = 7u8;
    z80_f = 0u8;
    z80_a = 25u8;
    z80_c = 78u8;
    z80run({
        // add a, c
        0x81u8,
        HALT
    });
    ASSERT(z80_a == 25u8 + 78u8);
    ASSERT(z80_f == 0u8);
    z80_a = 127u8;
    z80_d = 1u8;
    z80run({
        // add a, d
        0x82u8,
        HALT
    });
    ASSERT(z80_a == 128u8);
    ASSERT(z80_f == (FLAG_S | FLAG_P));
    z80_a = 255u8;
    z80_e = 1u8;
    z80run({
        // add a, e
        0x83u8,
        HALT
    });
    ASSERT(z80_a == 0u8);
    ASSERT(z80_f == (FLAG_C | FLAG_Z));
    z80_a = 253u8;
    z80_h = 255u8;
    z80run({
        // add a, h
        0x84u8,
        HALT
    });
    ASSERT(z80_a == 252u8);
    ASSERT(z80_f == (FLAG_C | FLAG_S));
    z80_a = 129u8;
    z80_l = 130u8;
    z80run({
        // add a, l
        0x85u8,
        HALT
    });
    ASSERT(z80_a == 3u8);
    ASSERT(z80_f == (FLAG_C | FLAG_P));
    ok();
}

u8 test_arithm8_ops() {
    test_number = 8u8;
    z80_f = FLAG_C;
    z80_a = 5u8;
    z80_b = 10u8;
    z80run({
        // adc a, b
        0x88u8,
        HALT
    });
    ASSERT(z80_a == 16u8);
    ASSERT(z80_f == 0u8);

    z80_a = 5u8;
    z80_c = 10u8;
    z80run({
        // sub a, c
        0x91u8,
        HALT
    });
    ASSERT(z80_a == (u8)-5s8);
    ASSERT(z80_f == (FLAG_C | FLAG_S | FLAG_N));

    z80_a = 60u8;
    z80_d = 20u8;
    z80run({
        // sbc a, d
        0x9au8,
        HALT
    });
    ASSERT(z80_a == 39u8);
    ASSERT(z80_f == (FLAG_N));

    z80_a = 0xf0u8;
    z80_e = 0xa5u8;
    z80run({
        // and a, e
        0xa3u8,
        HALT
    });
    ASSERT(z80_a == 0xa0u8);
    ASSERT(z80_f == (FLAG_S | FLAG_H));

    z80_a = 0xa0u8;
    z80_h = 0x03u8;
    z80run({
        // or a, h
        0xb4u8,
        HALT
    });
    ASSERT(z80_a == 0xa3u8);
    ASSERT(z80_f == FLAG_S);

    z80_a = 0x0fu8;
    z80_l = 0xa5u8;
    z80run({
        // xor a, l
        0xadu8,
        HALT
    });
    ASSERT(z80_a == 0xaau8);
    ASSERT(z80_f == (FLAG_S));

    z80_a = 5u8;
    z80_c = 10u8;
    z80run({
        // cp a, c
        0xb9u8,
        HALT
    });
    ASSERT(z80_a == 5u8);
    ASSERT(z80_f == (FLAG_C | FLAG_S | FLAG_N));
    ok();
}

u8 test_arithm8_imm_and_indir() {
    test_number = 9u8;
    z80_a = 140u8;
    z80_f = 0u8;
    z80run({
        // sbc a, 20
        0xdeu8, 20u8,
        HALT
    });
    ASSERT(z80_a == 120u8);
    ASSERT(z80_f == (FLAG_P | FLAG_N));

    u32 src = 0x12345678u32;
    z80_a = 0xd0u8;
    z80_hl = (u16)&src;
    z80run({
        // and a, (hl)
        0xa6u8,
        HALT
    });
    ASSERT(z80_a == (0x78u8 & 0xd0u8));
    ASSERT(z80_f == FLAG_H);

    z80_a = 0x55u8;
    z80_ix = (u16)&src + 77u16;
    z80run({
        // xor a, (ix - 76)
        0xddu8, 0xaeu8, (u8)-76s8,
        HALT
    });
    ASSERT(z80_a == (0x56u8 ^ 0x55u8));
    ASSERT(z80_f == 0u8);

    z80_a = 0xa0u8;
    z80_iy = (u16)&src - 42u16;
    z80run({
        // add a, (iy + 44)
        0xfdu8, 0x86u8, 44u8,
        HALT
    });
    ASSERT(z80_a == (0x34u8 + 0xa0u8));
    ASSERT(z80_f == (FLAG_S));

    ok();
}

u8 test_incdec() {
    test_number = 10u8;
    z80_a = 50u8;
    z80_b = 0xffu8;
    z80_c = 0x80u8;
    z80_f = FLAG_C;
    z80run({
        // inc a
        0x3cu8,
        HALT
    });
    ASSERT(z80_a == 51u8);
    ASSERT(z80_f == FLAG_C);

    z80run({
        // inc b
        0x04u8,
        HALT
    });
    ASSERT(z80_b == 00u8);
    ASSERT(z80_f == (FLAG_Z | FLAG_C));

    z80_f = 0u8;
    z80run({
        // dec c
        0x0du8,
        HALT
    });
    ASSERT(z80_c == 0x7fu8);
    ASSERT(z80_f == (FLAG_N | FLAG_P));


    z80_ix = 0x0102u16;
    z80run({
        // dec IXh
        0xddu8, 0x25u8,
        HALT
    });
    ASSERT(z80_ix == 0x0002u16);
    ASSERT(z80_f == (FLAG_N | FLAG_Z));

    z80_iy = 0x0005u16;
    z80run({
        // dec IYh
        0xfdu8, 0x25u8,
        HALT
    });
    ASSERT(z80_iy == 0xFF05u16);
    ASSERT(z80_f == (FLAG_N | FLAG_S));

    z80_ix = 0x0102u16;
    z80run({
        // inc IXl
        0xddu8, 0x2Cu8,
        HALT
    });
    ASSERT(z80_ix == 0x0103u16);
    ASSERT(z80_f == 0u8);

    z80_iy = 0x007fu16;
    z80_f = FLAG_C;
    z80run({
        // inc IYl
        0xfdu8, 0x2Cu8,
        HALT
    });
    ASSERT(z80_iy == 0x0080u16);
    ASSERT(z80_f == (FLAG_S | FLAG_P | FLAG_C));
    ok();
}

u8 test_incdec_indir() {
    test_number = 11u8;

    u32 dest = 0x1234ff7fu32;

    z80_hl = (u16)&dest;
    z80_ix = (u16)&dest - 77u16;
    z80_iy = (u16)&dest + 10u16;
    z80_f = FLAG_C;
    z80run({
        // inc (hl)
        0x34u8,
        HALT
    });
    ASSERT(dest == 0x1234ff80u32);
    ASSERT(z80_f == (FLAG_S | FLAG_P | FLAG_C));

    z80_f = 0u8;
    z80run({
        // inc (ix + 78)
        0xddu8, 0x34u8, 78u8,
        HALT
    });
    ASSERT(dest == 0x12340080u32);
    ASSERT(z80_f == (FLAG_Z));

    z80run({
        // inc (iy - 8)
        0xfdu8, 0x34u8, (u8)-8s8,
        HALT
    });
    ASSERT(dest == 0x12350080u32);
    ASSERT(z80_f == 0u8);

    z80run({
        // dec (ix + 77)
        0xddu8, 0x35u8, 77u8,
        HALT
    });
    ASSERT(dest == 0x1235007fu32);
    ASSERT(z80_f == (FLAG_P | FLAG_N));

    z80run({
        // dec (iy - 9)
        0xfdu8, 0x35u8, (u8)-9s8,
        HALT
    });
    ASSERT(dest == 0x1235ff7fu32);
    ASSERT(z80_f == (FLAG_S | FLAG_N));

    z80_f = FLAG_C;
    z80run({
        // dec (hl)
        0x35u8,
        HALT
    });
    ASSERT(dest == 0x1235ff7eu32);
    ASSERT(z80_f == (FLAG_C | FLAG_N));

    ok();
}

u8 test_ld16() {
    test_number = 12u8;

    z80_bc = 0u16;
    z80_de = 0u16;
    z80_hl = 0u16;
    z80_sp = 0u16;
    z80_ix = 0u16;
    z80_iy = 0u16;

    z80run({
        // ld bc, 0x1234
        0x01u8, 0x34u8, 0x12u8,
        // ld de, 0x5678
        0x11u8, 0x78u8, 0x56u8,
        // ld hl, 0x9abc
        0x21u8, 0xbcu8, 0x9au8,
        // ld sp, 0xdef0
        0x31u8, 0xf0u8, 0xdeu8,
        // ld ix, 0x0246
        0xddu8, 0x21u8, 0x46u8, 0x02u8,
        // ld iy, 0x8ace
        0xfdu8, 0x21u8, 0xceu8, 0x8au8,
        HALT
    });
    ASSERT(z80_bc == 0x1234u16);
    ASSERT(z80_de == 0x5678u16);
    ASSERT(z80_hl == 0x9abcu16);
    ASSERT(z80_sp == 0xdef0u16);
    ASSERT(z80_ix == 0x0246u16);
    ASSERT(z80_iy == 0x8aceu16);

    u32 src = 0x23456789u32;
    struct Opcode16WithAddress op;
    // ld bc, (nn)
    op.prefix = 0xedu8;
    op.opcode = 0x4bu8;
    op.src = (u8*)&src;
    op.halt = HALT;
    z80run((u8*)&op);
    ASSERT(z80_bc == 0x6789u16);

    // ld de, (nn)
    op.opcode = 0x5bu8;
    op.src = (u8*)&src + 1;
    z80run((u8*)&op);
    ASSERT(z80_de == 0x4567u16);

    // ld sp, (nn)
    op.opcode = 0x7bu8;
    op.src = (u8*)&src + 2;
    z80run((u8*)&op);
    ASSERT(z80_sp == 0x2345u16);

    // ld ix, (nn)
    op.prefix = 0xddu8;
    op.opcode = 0x2au8;
    op.src = (u8*)&src;
    z80run((u8*)&op);
    ASSERT(z80_ix == 0x6789u16);

    // ld iy, (nn)
    op.prefix = 0xfdu8;
    op.src = (u8*)&src + 1;
    z80run((u8*)&op);
    ASSERT(z80_iy == 0x4567u16);

    struct Opcode8WithAddress op8;

    // ld hl, (nn)
    op8.opcode = 0x2au8;
    op8.src = (u8*)&src + 2;
    op8.halt = HALT;
    z80run((u8*)&op8);
    ASSERT(z80_hl == 0x2345u16);

    ok();
}

u8 test_st16() {
    test_number = 13u8;
    z80_bc = 0x4321u16;
    z80_de = 0x5432u16;
    z80_hl = 0x6543u16;
    z80_sp = 0x7633u16;
    z80_iy = 0x8665u16;
    z80_ix = 0x9378u16;

    u32 dst = 0u32;
    struct Opcode16WithAddress op;
    // ld (nn), bc
    op.prefix = 0xedu8;
    op.opcode = 0x43u8;
    op.src = (u8*)&dst;
    op.halt = HALT;
    z80run((u8*)&op);
    ASSERT(dst == 0x4321u32);

    // ld (nn), de
    op.opcode = 0x53u8;
    op.src = (u8*)&dst + 1;
    z80run((u8*)&op);
    ASSERT(dst == 0x543221u32);

    // ld (nn), sp
    op.opcode = 0x73u8;
    op.src = (u8*)&dst + 2;
    z80run((u8*)&op);
    ASSERT(dst == 0x76333221u32);

    // ld (nn), ix
    op.prefix = 0xddu8;
    op.opcode = 0x22u8;
    op.src = (u8*)&dst + 1;
    z80run((u8*)&op);
    ASSERT(dst == 0x76937821u32);

    // ld (nn), iy
    op.prefix = 0xfdu8;
    op.src = (u8*)&dst;
    z80run((u8*)&op);
    ASSERT(dst == 0x76938665u32);

    // ld (nn), hl
    struct Opcode8WithAddress op8;
    op8.opcode = 0x22u8;
    op8.src = (u8*)&dst + 1;
    op8.halt = HALT;
    z80run((u8*)&op8);
    ASSERT(dst == 0x76654365u32);

    ok();
}

u8 test_push() {
    test_number = 14u8;

    u32 dst = 0x0u32;
    z80_sp = (u16)&dst + 2u16;
    z80_bc = 0x1234u16;
    z80run({
        // push bc
        0xc5u8,
        HALT
    });
    ASSERT(z80_sp == (u16)&dst);
    ASSERT(dst == 0x1234u32);

    z80_sp = (u16)&dst + 3u16;
    z80_a = 0xbau8;
    z80_f = 0x33u8;
    z80run({
        // push af
        0xf5u8,
        HALT
    });
    ASSERT(z80_sp == (u16)&dst + 1u16);
    ASSERT(dst == 0xba3334u32);

    z80_sp = (u16)&dst + 4u16;
    z80_iy = 0x9876u16;
    z80run({
        // push iy
        0xfdu8, 0xe5u8,
        HALT
    });
    ASSERT(z80_sp == (u16)&dst + 2u16);
    ASSERT(dst == 0x98763334u32);

    z80_hl = 0xdeadu16;
    z80run({
        // push hl
        0xe5u8,
        HALT
    });
    ASSERT(z80_sp == (u16)&dst);
    ASSERT(dst == 0x9876deadu32);

    ok();
}

u8 test_pop() {
    test_number = 15u8;

    u32 dst = 0x12345678u32;
    z80_sp = (u16)&dst;
    z80_bc = 0u16;
    z80run({
        // pop bc
        0xc1u8,
        HALT
    });
    ASSERT(z80_sp == (u16)&dst + 2u16);
    ASSERT(z80_bc == 0x5678u16);

    z80_de = 0u16;
    z80run({
        // pop de
        0xd1u8,
        HALT
    });
    ASSERT(z80_sp == (u16)&dst + 4u16);
    ASSERT(z80_de == 0x1234u16);

    z80_sp = (u16)&dst + 1u16;
    z80_a = 0u8;
    z80_f = 0u8;
    z80run({
        // pop af
        0xf1u8,
        HALT
    });
    ASSERT(z80_sp == (u16)&dst + 3u16);
    ASSERT(z80_a == 0x34u8);
    ASSERT(z80_f == 0x56u8);

    dst = 0xabcdef01u32;
    z80_sp = (u16)&dst;
    z80_hl = 0u16;
    z80run({
        // pop hl
        0xe1u8,
        HALT
    });
    ASSERT(z80_sp == (u16)&dst + 2u16);
    ASSERT(z80_hl == 0xef01u16);

    z80_ix = 0u16;
    z80run({
        // pop ix
        0xddu8, 0xe1u8,
        HALT
    });
    ASSERT(z80_sp == (u16)&dst + 4u16);
    ASSERT(z80_ix == 0xabcdu16);

    z80_sp = (u16)&dst + 1u16;
    z80_iy = 0u16;
    z80run({
        // pop iy
        0xfdu8, 0xe1u8,
        HALT
    });
    ASSERT(z80_sp == (u16)&dst + 3u16);
    ASSERT(z80_iy == 0xcdefu16);

    ok();
}

u8 test_ldsp() {
    test_number = 16u8;
    z80_sp = 0u16;
    z80_hl = 0x1234u16;
    z80_ix = 0x5678u16;
    z80_iy = 0x9abcu16;

    z80run({
        // ld sp, hl
        0xf9u8,
        HALT
    });
    ASSERT(z80_sp == 0x1234u16);

    z80run({
        // ld sp, ix
        0xddu8, 0xf9u8,
        HALT
    });
    ASSERT(z80_sp == 0x5678u16);

    z80run({
        // ld sp, iy
        0xfdu8, 0xf9u8,
        HALT
    });
    ASSERT(z80_sp == 0x9abcu16);
    ok();
}

u8 test_add16() {
    test_number = 17u8;

    z80_f = FLAG_S | FLAG_N;
    z80_hl = 0x1234u16;
    z80_bc = 0x33ffu16;
    z80run({
        // add hl, bc
        0x09u8,
        HALT
    });
    ASSERT(z80_hl == 0x4633u16);
    ASSERT(z80_f == FLAG_S);

    z80_f = FLAG_P;
    z80_hl = 0x1234u16;
    z80_bc = 0xf30fu16;
    z80run({
        // add hl, bc
        0x09u8,
        HALT
    });
    ASSERT(z80_hl == 0x0543u16);
    ASSERT(z80_f == FLAG_C | FLAG_P);

    z80_f = FLAG_Z | FLAG_N | FLAG_C;
    z80_hl = 0xaabbu16;
    z80_de = 0x33ffu16;
    z80run({
        // add hl, de
        0x19u8,
        HALT
    });
    ASSERT(z80_hl == 0xDEBAu16);
    ASSERT(z80_f == FLAG_Z);
    ok();

    z80_f = FLAG_P | FLAG_N;
    z80_ix = 0xaabbu16;
    z80_sp = 0xb1e6u16;
    z80run({
        // add ix, sp
        0xddu8, 0x39u8,
        HALT
    });
    ASSERT(z80_ix == 0x5CA1u16);
    ASSERT(z80_f == FLAG_P | FLAG_C);

    z80_f = FLAG_P | FLAG_N | FLAG_S | FLAG_C;
    z80_hl = 0xaabbu16;
    z80run({
        // add hl, hl
        0x29u8,
        HALT
    });
    ASSERT(z80_hl == 0x5576u16);
    ASSERT(z80_f == FLAG_P | FLAG_C | FLAG_S);

    z80_f = FLAG_P | FLAG_N | FLAG_S | FLAG_C;
    z80_iy = 0x12deu16;
    z80run({
        // add iy, iy
        0xfdu8, 0x29u8,
        HALT
    });
    ASSERT(z80_iy == 0x25bcu16);
    ASSERT(z80_f == FLAG_P | FLAG_S);

    ok();
}

u8 test_adc16() {
    test_number = 18u8;

    z80_f = FLAG_P | FLAG_N | FLAG_S | FLAG_C | FLAG_Z;
    z80_hl = 0x1234u16;
    z80_bc = 0x01ffu16;
    z80run({
        // adc hl, bc
        0xedu8, 0x4au8,
        HALT
    });
    ASSERT(z80_hl == 0x1434u16);
    ASSERT(z80_f == 0u8);

    z80_hl = 0x1234u16;
    z80_bc = 0x01ffu16;
    z80run({
        // adc hl, bc
        0xedu8, 0x4au8,
        HALT
    });
    ASSERT(z80_hl == 0x1433u16);
    ASSERT(z80_f == 0u8);

    z80_hl = 0x8234u16;
    z80_bc = 0xf1ffu16;
    z80run({
        // adc hl, bc
        0xedu8, 0x4au8,
        HALT
    });
    ASSERT(z80_hl == 0x7433u16);
    ASSERT(z80_f == FLAG_C | FLAG_P);

    z80_hl = 0xfffeu16;
    z80_bc = 0x0001u16;
    z80run({
        // adc hl, bc
        0xedu8, 0x4au8,
        HALT
    });
    ASSERT(z80_hl == 0x0000u16);
    ASSERT(z80_f == FLAG_C | FLAG_Z);

    z80_hl = 0x7fffu16;
    z80_bc = 0x0001u16;
    z80run({
        // adc hl, bc
        0xedu8, 0x4au8,
        HALT
    });
    ASSERT(z80_hl == 0x8001u16);
    ASSERT(z80_f == FLAG_P | FLAG_S);

    z80_hl = 0x8fffu16;
    z80_bc = 0x0001u16;
    z80run({
        // adc hl, bc
        0xedu8, 0x4au8,
        HALT
    });
    ASSERT(z80_hl == 0x9000u16);
    ASSERT(z80_f == FLAG_S);
    ok();

    z80_f = FLAG_P | FLAG_N | FLAG_S | FLAG_C | FLAG_Z;
    z80_hl = 0xdfffu16;
    z80_de = 0x2000u16;
    z80run({
        // adc hl, de
        0xedu8, 0x5au8,
        HALT
    });
    ASSERT(z80_hl == 0x0000u16);
    ASSERT(z80_f == FLAG_Z | FLAG_C);

    z80_hl = 0x6fffu16;
    z80_sp = 0x2000u16;
    z80run({
        // adc hl, sp
        0xedu8, 0x7au8,
        HALT
    });
    ASSERT(z80_hl == 0x9000u16);
    ASSERT(z80_f == FLAG_P | FLAG_S);

    z80_hl = 0x6543u16;
    z80run({
        // adc hl, hl
        0xedu8, 0x6au8,
        HALT
    });
    ASSERT(z80_hl == 0xCA86u16);
    ASSERT(z80_f == FLAG_P | FLAG_S);
    ok();
}

u8 test_sbc16() {
    test_number = 19u8;

    z80_f = FLAG_P | FLAG_N | FLAG_S | FLAG_C | FLAG_Z;
    z80_hl = 0x1234u16;
    z80_bc = 0x01ffu16;
    z80run({
        // sbc hl, bc
        0xedu8, 0x42u8,
        HALT
    });
    ASSERT(z80_hl == 0x1034u16);
    ASSERT(z80_f == FLAG_N);

    z80_hl = 0x0000u16;
    z80_de = 0x01ffu16;
    z80run({
        // sbc hl, de
        0xedu8, 0x52u8,
        HALT
    });
    ASSERT(z80_hl == 0xFE01u16);
    ASSERT(z80_f == FLAG_N | FLAG_S | FLAG_C);

    z80_hl = 0x8123u16;
    z80_sp = 0x2122u16;
    z80run({
        // sbc hl, sp
        0xedu8, 0x72u8,
        HALT
    });
    ASSERT(z80_hl == 0x6000u16);
    ASSERT(z80_f == FLAG_N | FLAG_P);

    z80run({
        // sbc hl, hl
        0xedu8, 0x62u8,
        HALT
    });
    ASSERT(z80_hl == 0x0000u16);
    ASSERT(z80_f == FLAG_N | FLAG_Z);

    z80_f = FLAG_C;
    z80run({
        // sbc hl, hl
        0xedu8, 0x62u8,
        HALT
    });
    ASSERT(z80_hl == 0xFFFFu16);
    ASSERT(z80_f == FLAG_N | FLAG_S | FLAG_C | FLAG_H);

    ok();
}

u8 test_incdec16() {
    test_number = 20u8;

    z80_hl = 0x1234u16;
    z80_ix = 0xdeadu16;
    z80_iy = 0xbabeu16;
    z80_bc = 0xffffu16;
    z80_de = 0x66ffu16;
    z80_sp = 0xff00u16;
    z80run({
        // inc hl
        0x23u8,
        HALT
    });
    ASSERT(z80_hl == 0x1235u16);

    z80run({
        // inc ix
        0xddu8, 0x23u8,
        HALT
    });
    ASSERT(z80_ix == 0xdeaeu16);

    z80run({
        // inc iy
        0xfdu8, 0x23u8,
        HALT
    });
    ASSERT(z80_iy == 0xbabfu16);

    z80run({
        // inc bc
        0x03u8,
        HALT
    });
    ASSERT(z80_bc == 0x0000u16);

    z80run({
        // inc de
        0x13u8,
        HALT
    });
    ASSERT(z80_de == 0x6700u16);

    z80run({
        // inc sp
        0x33u8,
        HALT
    });
    ASSERT(z80_sp == 0xff01u16);

    // dec
    z80run({
        // dec hl
        0x2bu8,
        HALT
    });
    ASSERT(z80_hl == 0x1234u16);

    z80run({
        // dec ix
        0xddu8, 0x2bu8,
        HALT
    });
    ASSERT(z80_ix == 0xdeadu16);

    z80run({
        // dec iy
        0xfdu8, 0x2bu8,
        HALT
    });
    ASSERT(z80_iy == 0xbabeu16);

    z80run({
        // dec bc
        0x0bu8,
        HALT
    });
    ASSERT(z80_bc == 0xffffu16);

    z80run({
        // dec de
        0x1bu8,
        HALT
    });
    ASSERT(z80_de == 0x66ffu16);

    z80run({
        // dec sp
        0x3bu8,
        HALT
    });
    ASSERT(z80_sp == 0xff00u16);

    ok();
}


export u8 main() {
    vga_clear(COLOR(COLOR_GRAY, COLOR_BLACK));
    test_number = 0u8;
    z80_a = 5u8;
    draw_test_numbers();
    test_copy_reg();
    test_copy_r_indir();
    test_store_indir_r();
    test_store_indir_imm();
    test_store_reg_imm();
    test_ld_a_indir_imm16();
    test_ld_a_indir_bcde();
    test_arithm8_add();
    test_arithm8_ops();
    test_arithm8_imm_and_indir();
    test_incdec();
    test_incdec_indir();
    test_ld16();
    test_st16();
    test_push();
    test_pop();
    test_ldsp();
    test_add16();
    test_adc16();
    test_sbc16();
    test_incdec16();
}
