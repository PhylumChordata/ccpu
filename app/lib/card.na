#include "card.h"

#define SPI_DATA *((u8*)0xFD02)
#define SPI_CTRL *((u8*)0xFD03)

#define SPI_CTRL_N_CARD_DETECT 1u8
#define SPI_CTRL_WRITE_PROTECT 2u8
#define SPI_CTRL_N_CARD_CS 4u8
#define SPI_CTRL_EN_3V3 8u8

// #define IMPORTED_SPI_TRANSFER

#ifdef IMPORTED_SPI_TRANSFER
import u8 spi_transfer(u8 x);
#else
u8 spi_transfer(u8 x) {
    SPI_DATA = x;
    return SPI_DATA;
}
#endif

#define R1_IDLE 1u8
#define R1_READY 0u8
#define R1_ILLEGAL_COMMAND 4u8

#define DATA_START_BLOCK 0xFEu8
#define DATA_RSP_MASK 0x1Fu8
#define DATA_RSP_ACCEPTED    0b00101u8
#define DATA_RSP_CRC_ERROR   0b01011u8
#define DATA_RSP_WRITE_ERROR 0b01101u8

u8 delay_1ms() {
    for (u16 i = 0u16; i < 1000u16; i += 1u16) {}
}

export u8 card_is_present() {
    return !(SPI_CTRL & SPI_CTRL_N_CARD_DETECT);
}

export u8 card_init() {
    u8 r;
    SPI_CTRL = SPI_CTRL_EN_3V3 | SPI_CTRL_N_CARD_CS;
    delay_1ms();

    spi_transfer(0xffu8);
    spi_transfer(0xffu8);
    spi_transfer(0xffu8);
    spi_transfer(0xffu8);
    spi_transfer(0xffu8);

    spi_transfer(0xffu8);
    spi_transfer(0xffu8);
    spi_transfer(0xffu8);
    spi_transfer(0xffu8);
    spi_transfer(0xffu8);

    SPI_CTRL = SPI_CTRL_EN_3V3; // CS low
    // CMD0, soft reset
    spi_transfer(0x40u8);
    spi_transfer(0x00u8);
    spi_transfer(0x00u8);
    spi_transfer(0x00u8);
    spi_transfer(0x00u8);
    spi_transfer(0x95u8);
    for (u8 t = 0u8; t < 4u8; t += 1u8) { // wait for response
        r = spi_transfer(0xFFu8);
        if (r != 0xffu8) {
            break;
        }
    }
    if (t == 4u8) {
        SPI_CTRL = 0u8;
        return CARD_ERROR_TIMEOUT;
    }
    if (r != R1_IDLE) {
        SPI_CTRL = 0u8;
        return CARD_ERROR_RESET_FAILED;
    }
    spi_transfer(0xFFu8);

    r = 0xffu8;
    while (r != R1_READY) {
        // ACMD41
        spi_transfer(0x40u8 | 55u8);
        spi_transfer(0x00u8);
        spi_transfer(0x00u8);
        spi_transfer(0x00u8);
        spi_transfer(0x00u8);
        spi_transfer(0xFFu8); // CRC

        r = spi_transfer(0xFFu8);
        while (r & 0x80u8) {
            r = spi_transfer(0xFFu8);
        }

        if (r & 0xfeu8) {
            SPI_CTRL = 0u8;
            return CARD_ERROR_ACMD_FAILED;
        }
        spi_transfer(0xFFu8);

        spi_transfer(0x40u8 | 41u8);
        spi_transfer(0x00u8);
        spi_transfer(0x00u8);
        spi_transfer(0x00u8);
        spi_transfer(0x00u8);
        spi_transfer(0xFFu8); // CRC

        r = spi_transfer(0xFFu8);
        while (r & 0x80u8) {
            r = spi_transfer(0xFFu8);
        }
        if (r & 0xfeu8) {
            SPI_CTRL = 0u8;
            return CARD_ERROR_ACMD41_FAILED;
        }
        spi_transfer(0xFFu8);
    }
    return CARD_SUCCESS;
}

export u8 card_power_off() {
    SPI_CTRL = SPI_CTRL_N_CARD_CS;
}

export u8 card_read_block(u32 block_index, u8 *dst) {
    u8 r;
    block_index <<= 1u8;
    spi_transfer(0x40u8 | 17u8); // CMD17 - read single block
    spi_transfer(((u8*)(&block_index))[2]);
    spi_transfer(((u8*)(&block_index))[1]);
    spi_transfer(((u8*)(&block_index))[0]);
    spi_transfer(0u8);
    spi_transfer(0xFFu8); // CRC

    for (u8 t = 0u8; t < 4u8; t += 1u8) { // wait for response
        r = spi_transfer(0xFFu8);
        if (r != 0xffu8) {
            break;
        }
    }
    if (t == 4u8) {
        SPI_CTRL = 0u8;
        return CARD_ERROR_TIMEOUT;
    }
    if (r) {
        spi_transfer(0xFFu8);
        return CARD_ERROR_BLOCK_CMD_FAILED;
    }

    r = spi_transfer(0xffu8);
    while (r == 0xffu8) {
        r = spi_transfer(0xFFu8);
    }
    if (r != DATA_START_BLOCK) {
        return r;
    }
    for (u16 i = 0u16; i < 512u16; i += 1u16) {
        *dst = spi_transfer(0xFFu8);
        dst += 1u8;
    }
    // CRC
    spi_transfer(0xFFu8);
    spi_transfer(0xFFu8);

    // Final transfer
    spi_transfer(0xFFu8);
    return 0u8;
}

export u8 card_write_block(u32 block_index, u8 *src) {
    u8 r;
    block_index <<= 1u8;
    spi_transfer(0x40u8 | 24u8); // CMD24 - write single block
    spi_transfer(((u8*)(&block_index))[2]);
    spi_transfer(((u8*)(&block_index))[1]);
    spi_transfer(((u8*)(&block_index))[0]);
    spi_transfer(0u8);
    spi_transfer(0xFFu8); // CRC

    for (u8 t = 0u8; t < 4u8; t += 1u8) { // wait for response
        r = spi_transfer(0xFFu8);
        if (r != 0xffu8) {
            break;
        }
    }
    if (t == 4u8) {
        SPI_CTRL = 0u8;
        return CARD_ERROR_TIMEOUT;
    }
    if (r) {
        spi_transfer(0xFFu8);
        return CARD_ERROR_BLOCK_CMD_FAILED;
    }

    spi_transfer(0xffu8);
    spi_transfer(0xffu8);

    spi_transfer(DATA_START_BLOCK);
    for (u16 i = 0u16; i < 512u16; i += 1u16) {
        spi_transfer(*src);
        src += 1u8;
    }
    // CRC
    spi_transfer(0xFFu8);
    spi_transfer(0xFFu8);

    // Data response
    u8 data_rsp = spi_transfer(0xFFu8);

    // Wait for ready
    r = spi_transfer(0xFFu8);
    while (r != 0xFFu8) {
        r = spi_transfer(0xFFu8);
    }
    spi_transfer(0xFFu8); // just in case

    data_rsp &= DATA_RSP_MASK;
    if (data_rsp == DATA_RSP_ACCEPTED) {
        return 0u8;
    } else if (data_rsp == DATA_RSP_WRITE_ERROR) {
        return CARD_ERROR_WRITE_ERROR;
    } else if (data_rsp == DATA_RSP_CRC_ERROR) {
        return CARD_ERROR_CRC_ERROR;
    } else {
        return CARD_ERROR_BAD_DATA_RESPONSE;
    }
}

