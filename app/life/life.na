#include "life.h"
#include <string.h>
#include <vga.h>
#include "quasipixel.h"

#define LAST_ROW_OFFSET VGA_OFFSET(0u8, VGA_ROWS - 1u8)

export u8 life_init() {
}

u8 get_next(
        u8 ptl, u8 ptc, u8 ptr,
        u8 pcl, u8 pcc, u8 pcr,
        u8 pbl, u8 pbc, u8 pbr) {
    u8 rt, rc, rb;

    u8 t = pcc & 1u8;
    u8 b = pcc & 2u8;

    ptl >>= 1u8;
    ptc >>= 1u8;
    ptr >>= 1u8;
    pbl &= 1u8;
    pbc &= 1u8;
    pbr &= 1u8;
    rt = ptl + ptc + ptr;
    rb = pbl + pbc + pbr;
    rc = pcl + pcc + pcr;
    pcl >>= 1u8;
    pcc >>= 1u8;
    pcr >>= 1u8;
    rc -= pcl + pcc + pcr;

    u8 st = rt + rc;
    u8 sb = rc + rb;

    if (st == 3u8) {
        t = 1u8;
    } else if (st != 4u8) {
        t = 0u8;
    }
    if (sb == 3u8) {
        b = 2u8;
    } else if (sb != 4u8) {
        b = 0u8;
    }
    return t | b;
}

export u8 life_step_and_render() {
    u8 top_row[VGA_COLS];
    u8 first_row[VGA_COLS];
    memcpy((u8*)top_row, (u8*)qp_fb + VGA_OFFSET(0u8, VGA_ROWS - 1u8), (u16)VGA_COLS);
    memcpy((u8*)first_row, (u8*)qp_fb, (u16)VGA_COLS);
    u16 offset = VGA_OFFSET(0u8, 0u8);
    u16 offset_bot = VGA_OFFSET(0u8, 1u8);
    u8 leftmost;
    u8 leftmost_top;
    u8 result_0;
    u8 result_1;
    for (u8 y = 0u8; y < VGA_ROWS - 1u8; y += 1u8) {
        leftmost = qp_fb[offset];
        leftmost_top = top_row[0u8];
        result_0 = get_next(
            top_row[VGA_COLS - 1u8],
            leftmost_top,
            top_row[1u8],
            qp_fb[offset + (u16)(VGA_COLS - 1u8)],
            leftmost,
            qp_fb[offset + 1u16],
            qp_fb[offset_bot + (u16)(VGA_COLS - 1u8)],
            qp_fb[offset_bot],
            qp_fb[offset_bot + 1u16]);

        offset += 1u16;
        offset_bot += 1u16;

        u16 offset_minus_1;

        for (u8 x = 1u8; x < VGA_COLS - 1u8; x += 1u8) {
            offset_minus_1 = offset - 1u16;
            result_1 = result_0;
            result_0 = get_next(
                top_row[x - 1u8],
                top_row[x],
                top_row[x + 1u8],
                qp_fb[offset_minus_1],
                qp_fb[offset],
                qp_fb[offset + 1u16],
                qp_fb[offset_bot - 1u16],
                qp_fb[offset_bot],
                qp_fb[offset_bot + 1u16]);

            top_row[x - 1u8] = qp_fb[offset_minus_1];
            qp_fb[offset_minus_1] = result_1;

            offset += 1u16;
            offset_bot += 1u16;
        }

        offset_minus_1 = offset - 1u16;

        result_1 = get_next(
            top_row[VGA_COLS - 2u8],
            top_row[VGA_COLS - 1u8],
            leftmost_top,
            qp_fb[offset_minus_1],
            qp_fb[offset],
            leftmost,
            qp_fb[offset_bot - 1u16],
            qp_fb[offset_bot],
            qp_fb[offset_bot - (u16)(VGA_COLS - 1u8)]);

        top_row[VGA_COLS - 2u8] = qp_fb[offset_minus_1];
        top_row[VGA_COLS - 1u8] = qp_fb[offset];
        qp_fb[offset_minus_1] = result_0;
        qp_fb[offset] = result_1;

        offset += 128u16 - 80u16 + 1u16;
        offset_bot += 128u16 - 80u16 + 1u16;
    }
    // last row
    leftmost = qp_fb[LAST_ROW_OFFSET];
    leftmost_top = top_row[0u8];
    result_0 = get_next(
        top_row[VGA_COLS - 1u8],
        top_row[0u8],
        top_row[1u8],
        qp_fb[LAST_ROW_OFFSET + (u16)(VGA_COLS - 1u8)],
        leftmost,
        qp_fb[LAST_ROW_OFFSET + 1u16],
        first_row[VGA_COLS - 1u8],
        first_row[0u8],
        first_row[1u8]);

    for (x = 1u8; x < VGA_COLS - 1u8; x += 1u8) {
        result_1 = result_0;
        result_0 = get_next(
            top_row[x - 1u8],
            top_row[x],
            top_row[x + 1u8],
            qp_fb[(LAST_ROW_OFFSET - 1u16) + (u16)x],
            qp_fb[LAST_ROW_OFFSET + (u16)x],
            qp_fb[(LAST_ROW_OFFSET + 1u16) + (u16)x],
            first_row[x - 1u8],
            first_row[x],
            first_row[x + 1u8]);

        qp_fb[(LAST_ROW_OFFSET - 1u16) + (u16)x] = result_1;
    }

    result_1 = get_next(
        top_row[VGA_COLS - 2u8],
        top_row[VGA_COLS - 1u8],
        leftmost_top,
        qp_fb[VGA_OFFSET(VGA_COLS - 2u8, VGA_ROWS - 1u8)],
        qp_fb[VGA_OFFSET(VGA_COLS - 1u8, VGA_ROWS - 1u8)],
        leftmost,
        first_row[VGA_COLS - 2u8],
        first_row[VGA_COLS - 1u8],
        first_row[0u8]);

    qp_fb[VGA_OFFSET(VGA_COLS - 2u8, VGA_ROWS - 1u8)] = result_0;
    qp_fb[VGA_OFFSET(VGA_COLS - 1u8, VGA_ROWS - 1u8)] = result_1;

    qp_render();
}

