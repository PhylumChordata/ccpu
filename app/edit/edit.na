#include <vga.h>
#include <line_edit.h>
#include <fat/error.h>
#include <last_error.h>
#include <os/syscall.h>
#include <os/params.h>
#include <more.h>
#include <log.h>
#include <ps2keyboard.h>
#include <string.h>

#define TYPING_COLOR COLOR(COLOR_LIGHT_BLUE, COLOR_BLUE)
#define CURSOR_COLOR COLOR(COLOR_BLUE, COLOR_LIGHT_BLUE)
#define STATUS_COLOR COLOR(COLOR_BLACK, COLOR_CYAN)

#define MAX_LINES 460u16

#define NO_NEWLINE 128u8

struct Line {
    u8 len; // 0-59 - has newline, 128 - no newline, full
    struct Line *prev;
    struct Line *next;
    u8 data[59];
};

struct Line line_pool[MAX_LINES];

// where each screen before current starts:
struct Line *screen_ptrs[17]; // MAX_LINES / (u16)(VGA_ROWS - 1u8) + 1 - TODO fix compiler

// current screen index
u8 screen_idx;

// lines list head
struct Line *head;

// pool head and tail for allocating new lines
struct Line *pool_head;
struct Line *pool_tail;

section "sys_bss"
u8 buf[128];

section "sys_bss"
u8 filename_buf[40];

// actual file name
u8 *filename;

u8 cursor_col;
u8 cursor_row;
struct Line *cursor_line;

struct Line *next_screen;

u8 load(u8 *filename) {
    u8 fd = open(filename);
    if (fd == FAT_BAD_DESC) {
        log_string("Can't open");
        log_u8(last_error);
        return 0u8;
    }
    screen_idx = 0u8;
    struct Line *p = (struct Line*)line_pool;
    for (u16 i = 0u16; i != MAX_LINES - 1u16; i += 1u16) {
        p->next = p + 1;
        p = p->next;
    }
    p->next = (struct Line *)0;
    pool_tail = p;

    head = (struct Line*)line_pool;
    struct Line *cur_line = (struct Line*)line_pool;

    cur_line->len = 0u8;
    cur_line->prev = (struct Line*)0;
    while (1u8) {
        u16 r16 = read(fd, (u8*)buf, sizeof(buf));
        u8 r8 = (u8)r16;
        for (u8 i8 = 0u8; i8 != r8; i8 += 1u8) {
            cur_line->data[cur_line->len] = buf[i8];
            cur_line->len += 1u8;
            if (buf[i8] == '\n' || cur_line->len == (u8)sizeof(cur_line->data)) {
                if (buf[i8] == '\n') {
                    cur_line->len -= 1u8;
                } else {
                    cur_line->len = NO_NEWLINE;
                }
                p = cur_line;
                cur_line = cur_line->next;
                if ((u16)cur_line == 0u16) {
                    log_string("out of lines");
                    close(fd);
                    return 0u8;
                }
                cur_line->prev = p;
                cur_line->len = 0u8;
            }
        }

        if (r16 != sizeof(buf)) {
            if (last_error != FAT_EOF) {
                log_string("Can't read");
                log_u8(last_error);
                close(fd);
                return 0u8;
            }
            break;
        }
    }
    pool_head = cur_line->next;
    cur_line->next = (struct Line*)0;
    close(fd);
    return 1u8;
}

u8 init_layout() {
    vga_clear(TYPING_COLOR);
    memset((u8*)vga_color_seg + VGA_OFFSET(0, VGA_ROWS - 1u8), STATUS_COLOR, (u16)VGA_COLS);
    vga_put_text(1u8, VGA_ROWS - 1u8, filename);
}

struct Line *show_lines(struct Line *start) {
    init_layout();
    u8 row = 0u8;
    while (row != VGA_ROWS - 1u8 && (u16)start != 0u16) {
        u8 *p = (u8*)vga_char_seg + VGA_OFFSET(0, row);
        for (u8 i = 0u8; i != start->len && i != (u8)sizeof(start->data); i += 1u8) {
            u8 c = start->data[i];
            *p = c;
            p += 1u8;
        }
        row += 1u8;
        start = start->next;
    }
    if (row != VGA_ROWS - 1u8) {
        start = (struct Line *)0u8;
    }
    return start;
}

struct Line *alloc_line() {
    struct Line *result = pool_head;
    pool_head = pool_head->next;
    return result;
}

u8 free_line(struct Line *l) {
    if ((u16)pool_head == 0u16) {
        pool_head = l;
        pool_tail = l;
        l->next = (struct Line *)0;
    } else {
        pool_tail->next = l;
        pool_tail = l;
    }
}

u8 insert(u8 c) {
    if ((u16)pool_head == 0u16) {
        return 0u8; // can't insert, no lines left
    }
    struct Line *l = cursor_line;
    u8 i, next;
    u8 col = cursor_col;
    u8 row = cursor_row;
    u8 cursor_set = 0u8;
    vga_color_seg[VGA_OFFSET(cursor_col, cursor_row)] = TYPING_COLOR;
    while (1u8) {
        if (l->len < (u8)sizeof(l->data)) {
            // no line overflow
            for (i = l->len; i != col; i -= 1u8) {
                l->data[i] = l->data[i - 1u8];
            }
            l->len += 1u8;
            l->data[col] = c;
            if (row < VGA_ROWS - 1u8) {
                memcpy((u8*)vga_char_seg + VGA_OFFSET(col, row), (u8*)l->data + col, (u16)(l->len - col));
            }
            if (!cursor_set) {
                cursor_col = col + 1u8;
            }
            break;
        } else if (l->len == (u8)sizeof(l->data)) {
            // full line with a newline
            // insert a new line
            struct Line *new_line = alloc_line();
            new_line->len = 1u8;
            new_line->next = l->next;
            new_line->prev = l;
            if ((u16)l->next != 0u16) {
                l->next->prev = new_line;
            }
            l->next = new_line;
            if (col != (u8)sizeof(l->data)) {
                next = l->data[(u8)sizeof(l->data) - 1u8];
                for (i = (u8)sizeof(l->data) - 1u8; i != col; i -= 1u8) {
                    l->data[i] = l->data[i - 1u8];
                }
                l->data[col] = c;
                if (row < VGA_ROWS - 1u8) {
                    memcpy((u8*)vga_char_seg + VGA_OFFSET(col, row), (u8*)l->data + col, (u16)((u8)sizeof(l->data) - col));
                }
                if (!cursor_set) {
                    cursor_col = col + 1u8;
                }
            } else {
                next = c;
                if (!cursor_set) {
                    cursor_col = 1u8;
                    cursor_row += 1u8;
                    cursor_line = new_line;
                }
            }
            l->len = NO_NEWLINE;
            new_line->data[0] = next;
            if (row == VGA_ROWS - 2u8) {
                next_screen = next_screen->prev;
            } else {
                next_screen = show_lines(screen_ptrs[screen_idx]);
            }
            break;
        } else {
            // full line without a newline
            // carry over to the next line
            if (col != (u8)sizeof(l->data)) {
                next = l->data[(u8)sizeof(l->data) - 1u8];
                for (i = (u8)sizeof(l->data) - 1u8; i != col; i -= 1u8) {
                    l->data[i] = l->data[i - 1u8];
                }
                l->data[col] = c;
                if (row < VGA_ROWS - 1u8) {
                    memcpy((u8*)vga_char_seg + VGA_OFFSET(col, row), (u8*)l->data + col, (u16)((u8)sizeof(l->data) - col));
                }
                if (!cursor_set) {
                    cursor_set = 1u8;
                    cursor_col = col + 1u8;
                }
            } else {
                next = c;
                if (!cursor_set) {
                    cursor_set = 1u8;
                    cursor_col = 1u8;
                    cursor_row += 1u8;
                    cursor_line = cursor_line->next;
                }
            }
            c = next;
            col = 0u8;
            l = l->next;
            row += 1u8;
        }
    }
    if (cursor_row == VGA_ROWS - 1u8) {
        screen_idx += 1u8;
        screen_ptrs[screen_idx] = next_screen;
        next_screen = show_lines(next_screen);
        cursor_row = 0u8;
    }
    vga_color_seg[VGA_OFFSET(cursor_col, cursor_row)] = CURSOR_COLOR;
    return 1u8;
}

u8 break_line() {
    if ((u16)pool_head == 0u16) {
        return 0u8; // can't insert, no lines left
    }
    struct Line *new_line;
    if (cursor_line->len != NO_NEWLINE) {
        new_line = alloc_line();
        new_line->len = cursor_line->len - cursor_col;
        memcpy((u8*)new_line->data, (u8*)cursor_line->data + cursor_col, (u16)new_line->len);
        cursor_line->len = cursor_col;
        if ((u16)cursor_line->next != 0u16) {
            cursor_line->next->prev = new_line;
        }
        new_line->next = cursor_line->next;
        new_line->prev = cursor_line;
        cursor_line->next = new_line;
        cursor_line = new_line;
        cursor_row += 1u8;
        cursor_col = 0u8;
    } else {
        if (cursor_col == (u8)sizeof(cursor_line->data)) {
            cursor_line->len = (u8)sizeof(cursor_line->data);
            cursor_line = cursor_line->next;
            cursor_row += 1u8;
            cursor_col = 0u8;
        } else if (cursor_col == 0u8) {
            if ((u16)cursor_line->prev == 0u16) {
                new_line = alloc_line();
                head = new_line;
                new_line->prev = (struct Line*)0;
                new_line->next = cursor_line;
                new_line->len = 0u8;
                cursor_line->prev = new_line;
                screen_ptrs[0] = new_line;
                cursor_row += 1u8;
            } else if (cursor_line->prev->len == NO_NEWLINE) {
                cursor_line->prev->len = (u8)sizeof(cursor_line->data);
            } else {
                new_line = alloc_line();
                new_line->prev = cursor_line->prev;
                new_line->next = cursor_line;
                cursor_line->prev->next = new_line;
                cursor_line->prev = new_line;
                if (cursor_row == 0u8) {
                    screen_ptrs[screen_idx] = new_line;
                }
                cursor_row += 1u8;
            }
            cursor_col = 0u8;
        } else {
            u8 rest = (u8)sizeof(cursor_line->data) - cursor_col; // how many bytes to carry over to the next line
            // Cursor line is a part of a list of long lines.
            // Find the last line in the list.
            struct Line *tail = cursor_line;
            while (tail->len == NO_NEWLINE) { // tail can't be 0
                tail = tail->next;
            }
            if (tail->len >= cursor_col) {
                // the last line doesn't fit the carry-over part and the original contents
                new_line = alloc_line();
                new_line->prev = tail;
                new_line->next = tail->next;
                tail->next = new_line;
                if ((u16)new_line->next != 0u16) {
                    new_line->next->prev = new_line;
                }
                new_line->len = tail->len - cursor_col;
                memcpy((u8*)new_line->data, (u8*)tail->data + cursor_col, (u16)new_line->len);
                tail->len = NO_NEWLINE;
            } else {
                tail->len += rest;
            }

            while (tail != cursor_line) {
                for (s8 i = (s8)cursor_col - 1s8; i >= 0s8; i -= 1s8) {
                    tail->data[(u8)i + rest] = tail->data[(u8)i];
                }
                memcpy((u8*)tail->data, (u8*)tail->prev->data + cursor_col, (u16)rest);
                tail = tail->prev;
            }
            cursor_line->len = cursor_col;
            cursor_line = cursor_line->next;
            cursor_row += 1u8;
            cursor_col = 0u8;
        }
    }
    if (cursor_row == VGA_ROWS - 1u8) {
        screen_idx += 1u8;
        screen_ptrs[screen_idx] = new_line;
        cursor_row = 0u8;
    }
    next_screen = show_lines(screen_ptrs[screen_idx]);
    vga_color_seg[VGA_OFFSET(cursor_col, cursor_row)] = CURSOR_COLOR;
}

u8 delete(struct Line *l, u8 col) {
    u8 signle_line = 1u8;
    while (1u8) {
        if (l->len == 0u8) {
            if ((u16)l->prev == 0u16 && (u16)l->next == 0u16) {
                break; // the only line
            } else if ((u16)l->next == 0u16) {
                // last line
                if (l == cursor_line) {
                    cursor_line = cursor_line->prev;
                    if (cursor_row == 0u8) {
                        screen_idx -= 1u8;
                        cursor_row = VGA_ROWS - 2u8;
                    } else {
                        cursor_row -= 1u8;
                    }
                }
                l = l->prev;
                free_line(l->next);
                l->next = (struct Line *)0;
            } else if ((u16)l->prev == 0u16) {
                // first line
                head = head->next;
                head->prev = (struct Line *)0;
                screen_ptrs[0] = head;
                if (cursor_line == l) {
                    cursor_line = head;
                }
                free_line(l);
            } else {
                // line with both neighbors
                l->prev->next = l->next;
                l->next->prev = l->prev;
                if (cursor_line == l) {
                    cursor_line = l->next;
                }
                free_line(l);
            }
            signle_line = 0u8;
            break;
        } else if (l->len != NO_NEWLINE) {
            l->len -= 1u8;
            for (u8 i = col; i != l->len; i += 1u8) {
                l->data[i] = l->data[i + 1u8];
            }
            break;
        } else {
            signle_line = 0u8;
            for (i = col; i != (u8)sizeof(l->data) - 1u8; i += 1u8) {
                l->data[i] = l->data[i + 1u8];
            }
            if (l->next->len != 0u8) {
                l->data[(u8)sizeof(l->data) - 1u8] = l->next->data[0];
            } else {
                l->len = (u8)sizeof(l->data) - 1u8;
            }
            l = l->next;
            col = 0u8;
        }
    }
    return signle_line;
}

// Merge l and l->next
// l has newline
u8 merge_lines(struct Line *l) {
    struct Line *next = l->next;
    if ((u16)next == 0u16) {
        return;
    }
    u8 tail = (u8)sizeof(l->data) - l->len;
    while (1u8) {
        if (next->len <= tail) {
            memcpy((u8*)l->data + l->len, (u8*)next->data, (u16)next->len);
            l->len += next->len;
            l->next = next->next;
            if ((u16)l->next != 0u16) {
                l->next->prev = l;
            }
            free_line(next);
            break;
        } else {
            memcpy((u8*)l->data + l->len, (u8*)next->data, (u16)tail);
            l->len = NO_NEWLINE;
            if (next->len != NO_NEWLINE) {
                next->len -= tail;
                memcpy((u8*)next->data, (u8*)next->data + tail, (u16)next->len);
                break;
            } else {
                next->len = (u8)sizeof(next->data) - tail;
                memcpy((u8*)next->data, (u8*)next->data + tail, (u16)next->len);
                l = next;
                next = l->next;
            }
        }
    }
}

u8 delete_right() {
    vga_color_seg[VGA_OFFSET(cursor_col, cursor_row)] = TYPING_COLOR;
    if (cursor_col != (u8)sizeof(cursor_line->data) && cursor_col != cursor_line->len) {
        u8 single = delete(cursor_line, cursor_col);
        if (single) {
            u8 last = cursor_line->len;
            if (last == NO_NEWLINE) {
                last = (u8)sizeof(cursor_line->data);
            }
            memcpy((u8*)vga_char_seg + VGA_OFFSET(cursor_col, cursor_row), (u8*)cursor_line->data + cursor_col, (u16)(last - cursor_col));
            vga_char_seg[VGA_OFFSET(last, cursor_row)] = 0u8;
        } else {
            next_screen = show_lines(screen_ptrs[screen_idx]);
        }
    } else {
        if (cursor_line->len == NO_NEWLINE) {
            delete(cursor_line->next, 0u8);
        } else {
            merge_lines(cursor_line);
        }
        next_screen = show_lines(screen_ptrs[screen_idx]);
    }
    vga_color_seg[VGA_OFFSET(cursor_col, cursor_row)] = CURSOR_COLOR;
}

u8 delete_left() {
    vga_color_seg[VGA_OFFSET(cursor_col, cursor_row)] = TYPING_COLOR;
    if (cursor_col != 0u8) {
        cursor_col -= 1u8;
        u8 single = delete(cursor_line, cursor_col);
        if (single) {
            u8 last = cursor_line->len;
            if (last == NO_NEWLINE) {
                last = (u8)sizeof(cursor_line->data);
            }
            memcpy((u8*)vga_char_seg + VGA_OFFSET(cursor_col, cursor_row), (u8*)cursor_line->data + cursor_col, (u16)(last - cursor_col));
            vga_char_seg[VGA_OFFSET(last, cursor_row)] = 0u8;
        } else {
            next_screen = show_lines(screen_ptrs[screen_idx]);
        }
    } else {
        struct Line *prev_line = cursor_line->prev;
        if ((u16)prev_line != 0u16) {
            cursor_line = prev_line;
            if (cursor_row == 0u8) {
                cursor_row = VGA_ROWS - 2u8;
                screen_idx -= 1u8;
            } else {
                cursor_row -= 1u8;
            }

            if (prev_line->len == NO_NEWLINE) {
                cursor_col = (u8)sizeof(prev_line->data) - 1u8;
            } else if (prev_line->len != 0u8) {
                cursor_col = prev_line->len;
            } else {
                cursor_col = 0u8;
            }

            if (prev_line->len == NO_NEWLINE) {
                delete(prev_line, cursor_col);
            } else {
                merge_lines(prev_line);
            }
        }
        next_screen = show_lines(screen_ptrs[screen_idx]);
    }
    vga_color_seg[VGA_OFFSET(cursor_col, cursor_row)] = CURSOR_COLOR;
}

export u8 main() {
    ps2_init();
    vga_clear(TYPING_COLOR);
    u8 r, fd;
    if ((u16)app_param1 == 0u16) {
        filename_buf[0] = 0u8;
        vga_put_text(0u8, 0u8, "Filename: ");
        r = line_edit((u8*)filename_buf, (u8)sizeof(filename_buf) - 1u8, 10u8, 0u8, TYPING_COLOR);
        if (!r) {
            return;
        }
        filename = (u8*)filename_buf;
    } else {
        filename = app_param1;
    }
    r = load(filename);
    if (!r) {
        return;
    }
    cursor_col = 0u8;
    cursor_row = 0u8;
    next_screen = show_lines(head);
    vga_color_seg[VGA_OFFSET(0, 0)] = CURSOR_COLOR;
    screen_ptrs[0] = head;
    cursor_line = head;
    while (1u8) {
        u16 k = ps2_get_ascii();
        if (k == 0u16) {
            continue;
        }
        if (PS2_IS_ASCII(k)) {
            insert((u8)k);
        } else if ((u8)k == PS2_KEY_ENTER || (u8)k == PS2_KEY_NUM_ENTER) {
            break_line();
        } else if ((u8)k == PS2_KEY_BACKSPACE) {
            delete_left();
        } else if ((u8)k == PS2_KEY_DELETE || (u8)k == PS2_KEY_F1) {
            delete_right();
        } else if ((u8)k == PS2_KEY_UP) {
            if (cursor_row == 0u8) {
                if (screen_idx != 0u8) {
                    screen_idx -= 1u8;
                    next_screen = show_lines(screen_ptrs[screen_idx]);
                    cursor_row = VGA_ROWS - 2u8;
                }
            } else {
                vga_color_seg[VGA_OFFSET(cursor_col, cursor_row)] = TYPING_COLOR;
                cursor_row -= 1u8;
            }
            if ((u16)cursor_line->prev != 0u16) {
                cursor_line = cursor_line->prev;
                if (cursor_line->len < cursor_col) {
                    cursor_col = cursor_line->len;
                }
                vga_color_seg[VGA_OFFSET(cursor_col, cursor_row)] = CURSOR_COLOR;
            }
        } else if ((u8)k == PS2_KEY_DOWN) {
            if ((u16)cursor_line->next != 0u16) {
                if (cursor_row == VGA_ROWS - 2u8) {
                    if ((u16)next_screen != 0u16) {
                        screen_idx += 1u8;
                        screen_ptrs[screen_idx] = next_screen;
                        next_screen = show_lines(next_screen);
                        cursor_row = 0u8;
                    }
                } else {
                    vga_color_seg[VGA_OFFSET(cursor_col, cursor_row)] = TYPING_COLOR;
                    cursor_row += 1u8;
                }
                cursor_line = cursor_line->next;
                if (cursor_line->len < cursor_col) {
                    cursor_col = cursor_line->len;
                }
                vga_color_seg[VGA_OFFSET(cursor_col, cursor_row)] = CURSOR_COLOR;
            }
        } else if ((u8)k == PS2_KEY_RIGHT) {
            if (cursor_col == cursor_line->len || cursor_col == (u8)sizeof(next_screen->data)) {
                // TODO next line
            } else {
                vga_color_seg[VGA_OFFSET(cursor_col, cursor_row)] = TYPING_COLOR;
                cursor_col += 1u8;
                vga_color_seg[VGA_OFFSET(cursor_col, cursor_row)] = CURSOR_COLOR;
            }
        } else if ((u8)k == PS2_KEY_LEFT) {
            if (cursor_col == 0u8) {
                // TODO prev line
            } else {
                vga_color_seg[VGA_OFFSET(cursor_col, cursor_row)] = TYPING_COLOR;
                cursor_col -= 1u8;
                vga_color_seg[VGA_OFFSET(cursor_col, cursor_row)] = CURSOR_COLOR;
            }
        } else if ((u8)k == PS2_KEY_ESCAPE) {
            break;
        }
    }
}
