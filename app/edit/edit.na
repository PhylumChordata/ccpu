#include <vga.h>
#include <line_edit.h>
#include <fat/error.h>
#include <os/syscall.h>
#include <more.h>
#include <log.h>
#include <ps2keyboard.h>
#include <string.h>

#define MAIN_COLOR COLOR(COLOR_GREEN, COLOR_BLACK)
#define TYPING_COLOR COLOR(COLOR_GREEN, COLOR_BLACK)
#define STATUS_COLOR COLOR(COLOR_LIGHT_RED, COLOR_BLACK)

section "sys_bss"
u8 buf[64];

section "sys_bss"
u8 filename[40];

export u8 main() {
	ps2_init();
	vga_clear(MAIN_COLOR);
	u8 r;
    filename[0] = 0u8;
	vga_put_text(0u8, 0u8, "Filename: ");
	r = line_edit((u8*)filename, (u8)sizeof(filename) - 1u8, 10u8, 0u8, MAIN_COLOR);
	if (!r) {
		return;
	}
	u8 fd = open((u8*)filename);
	if (fd == FAT_BAD_DESC) {
		log_string("Can't open");
		log_u8((u8)syscall_last_error);
		return;
	}
    u8 k = 1u8;

    u8 append = 0u8;
    while (1u8) {
        u8 row = 1u8;
        vga_clear(TYPING_COLOR);
        memset((u8*)vga_color_seg, STATUS_COLOR, (u16)VGA_COLS);
        if (append) {
            vga_put_text(0u8, 0u8, "Appending");
            vga_put_text(10u8, 0u8, (u8*)filename);
        } else {
            vga_put_text(0u8, 0u8, "Typing");
            vga_put_text(7u8, 0u8, (u8*)filename);
        }
        while (row != VGA_ROWS) {
            buf[0u8] = 0u8;
            r = line_edit((u8*)buf, (u8)sizeof(buf), 0u8, row, TYPING_COLOR);
            if (!r) {
                r = truncate(fd);
                if (!r) {
                    log_string("Can't truncate");
                    log_u8((u8)syscall_last_error);
                }
                close(fd);
                return;
            }
            r = strlen_8((u8*)buf);
            buf[r] = '\n';
            buf[r + 1u8] = 0u8;
            for (u8 i = 0u8; i != 100u8; i += 1u8) {
                u16 l = write(fd, (u8*)buf, (u16)(r + 1u8));
                if (l != (u16)(r + 1u8)) {
                    log_string("Error writing");
                    log_u8((u8)syscall_last_error);
                }
            }
            row += 1u8;
        }
    }
}
