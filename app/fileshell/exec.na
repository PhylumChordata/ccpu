#include <fat/fat.h>
#include <fat/path.h>
#include <last_error.h>
#include "progressbar.h"
#include "loload.h"
#include "lorun.h"

import u8 __seg_extension_end[1];

import u8 *syscall_arg0;
import u8 *syscall_arg1;
import u8 *syscall_arg2;
import u8 *syscall_arg3;
import u8 *syscall_arg4;
import u8 *syscall_arg5;
import u8 *syscall_arg6;
import u8 *syscall_arg7;

export u8 exec(u8 *filename, u8 *arg1, u8 *arg2, u8 *arg3, u8 *arg4, u8 *arg5, u8 *arg6, u8 *arg7) {
    u8 fd = fat_open_path(filename);
    if (fd == FAT_BAD_DESC) {
        return 0u8;
    }
    syscall_arg0 = filename;
    return exec_fd(fd, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
}

export u8 exec_fd(u8 fd, u8 *arg1, u8 *arg2, u8 *arg3, u8 *arg4, u8 *arg5, u8 *arg6, u8 *arg7) {
    struct FatDirEntry *de = fat_get_dir_entry(fd);
    if ((u16)de == 0u16) {
        fat_close(fd);
        return 0u8;
    }
    u8 *ext = (u8*)de->filename + 8u8;
    if (ext[0] != 'A' || ext[1] != 'P' || ext[2] != 'P') {
        last_error = EXEC_ERROR_WRONG_EXTENSION;
        fat_close(fd);
        return 0u8;
    }
    u32 size32 = de->size;
    u16 max_size = (u16)__seg_extension_end;
    if (size32 > (u32)max_size) {
        last_error = EXEC_ERROR_FILE_TOO_LARGE;
        fat_close(fd);
        return 0u8;
    }
    u16 size = (u16)size32;
    progressbar_init((u8)(size >> 8u8));
    u8 dst_hi = 0u8;
    // load lo RAM part
    while (size != 0u16 && dst_hi != 0x80u8) {
        u16 r = fat_read(fd, (u8*)loload_buf, sizeof(loload_buf));
        if (r != sizeof(loload_buf)) {
            if (last_error != FAT_EOF) {
                fat_close(fd);
                return 0u8;
            }
        }
        copy_to_loram(dst_hi);
        size -= r;
        dst_hi += 1u8;
        progressbar_progress(1u8);
    }
    // load hi RAM part
    if (size != 0u16) {
        r = fat_read(fd, (u8*)0x8000u16, size);
        if (r != size) {
            fat_close(fd);
            return;
        }
        progressbar_progress((u8)(r >> 8u8));
    }
    fat_close(fd);
    syscall_arg1 = arg1;
    syscall_arg2 = arg2;
    syscall_arg3 = arg3;
    syscall_arg4 = arg4;
    syscall_arg5 = arg5;
    syscall_arg6 = arg6;
    syscall_arg7 = arg7;
    lorun();
    return 1u8;
}
