#include <string.h>
#include <vga.h>
#include <ps2keyboard.h>
#include <card.h>
#include <fat/fat.h>
#include <more.h>
#include <line_edit.h>
#include <log.h>
#include <keyboard.h>
#include "exec.h"

#define FILE_COLOR COLOR(COLOR_LIGHT_BLUE, COLOR_BLUE)
#define CURSOR_COLOR COLOR(COLOR_BLUE, COLOR_CYAN)
#define STATUS_COLOR COLOR(COLOR_BLACK, COLOR_CYAN)
#define TYPING_COLOR COLOR(COLOR_GREEN, COLOR_BLACK)

#define MAX_FILES 145u16

struct Filename {
    u8 name[13];
    u8 attrs;
    u8 filler[2];
};

struct Filename filenames[MAX_FILES];

struct FatDirEntry current_dir;

u8 current_dir_name[256];

u8 load_files() {
    u8 fd = fat_open_dir(&current_dir);
    if (fd == FAT_BAD_DESC) {
        vga_put_text(0u8, VGA_ROWS - 1u8, "fat_open_dir failed");
        ps2_wait_key_pressed();
        return 0u8;
    }
    struct FatDirEntry ent;
    struct Filename *name = (struct Filename*)filenames;
    for (u16 i = 0u16; i != MAX_FILES; i += 1u16) {
        name->name[0] = 0u8;
        u8 r = fat_get_next_dir_entry(fd, &ent, FAT_FILE_ATTR_HIDDEN | FAT_FILE_ATTR_SYSTEM | FAT_FILE_ATTR_VOLUME_ID);
        if (!r) {
            break;
        }
        from_fat_name((u8*)name->name, (u8*)ent.filename);
        name->attrs = ent.attrs;
        name += 1u8;
    }
    r = last_error == ERROR_OK;
    fat_close(fd);
    return r;
}

u16 display_table(u16 offset) {
    struct Filename *f = (struct Filename*)filenames + offset;
    u8 row = 0u8;
    u8 col = 1u8;
    while (offset != MAX_FILES) {
        if (f->name[0] == 0u8) {
            break;
        }
        vga_put_text(col, row, (u8*)f->name);
        if (f->attrs & FAT_FILE_ATTR_DIRECTORY) {
            vga_char_seg[VGA_OFFSET(col + 13u8, row)] = '/';
        }
        f += 1u8;
        offset += 1u16;
        row += 1u8;
        if (row == VGA_ROWS - 1u8) {
            col += 16u8;
            row = 0u8;
            if (col >= VGA_COLS) {
                break;
            }
        }
    }
    return offset;
}

u8 set_cursor(u8 col, u8 row, u8 color) {
    memset((u8*)vga_color_seg + VGA_OFFSET(col, row), color, 16u16);
}

u16 cursor_file_index;

u8 table_cursor_loop(u8 max_index, u8 reset_cursor) {
    // max 5 x 29 = 145 entries on the screen
    u8 row;
    u8 col;
    u8 index;
    u8 new_index;
    if (reset_cursor) {
        row = 0u8;
        col = 0u8;
        index = 0u8;
        new_index = 0u8;
        cursor_file_index = 0u16;
    }
    set_cursor(col, row, CURSOR_COLOR);
    while (1u8) {
        u8 k = ps2_wait_key_pressed();
        if (k == PS2_KEY_DOWN) {
            new_index = index + 1u8;
        } else if (k == PS2_KEY_UP) {
            new_index = index - 1u8;
        } else if (k == PS2_KEY_RIGHT) {
            new_index = index + (VGA_ROWS - 1u8);
        } else if (k == PS2_KEY_LEFT) {
            new_index = index - (VGA_ROWS - 1u8);
        } else {
            set_cursor(col, row, FILE_COLOR);
            return k;
        }
        if (new_index != index) {
            if (new_index < max_index) {
                index = new_index;
                set_cursor(col, row, FILE_COLOR);
                row = index % (VGA_ROWS - 1u8);
                col = (index / (VGA_ROWS - 1u8)) << 4u8;
                set_cursor(col, row, CURSOR_COLOR);
                cursor_file_index = (u16)index;
            } else {
                new_index = index;
            }
        }
    }
}

u8 print_file(u8 *name) {
    more_init(COLOR(COLOR_WHITE, COLOR_GREEN));
    u8 f = fat_open_file(&current_dir, name);
    if (f == FAT_BAD_DESC) {
        vga_put_text(0u8, 0u8, "Error");
        ps2_wait_key_pressed();
        return;
    }
    u8 buf[256];
    u8 k = 1u8;
    while (k) {
        u16 len = fat_read(f, (u8*)buf, 256u16);
        k = more_print((u8*)buf, len);
        if (len < 256u16) {
            if (last_error != FAT_EOF) {
                vga_put_text(0u8, VGA_ROWS - 1u8, "ERROR");
                ps2_wait_key_pressed();
            }
            break;
        }
    }
    if (k) {
        vga_put_text(0u8, VGA_ROWS - 1u8, "-- END --");
        ps2_wait_key_pressed();
    }
    fat_close(f);
}


import u8 __seg_extension_begin[1];
import u8 __seg_extension_end[1];
import u8 extension_start();

u8 run_extension(u8 *name) {
    u8 f = fat_open_file(&current_dir, name);
    if (f == FAT_BAD_DESC) {
        vga_put_text(0u8, VGA_ROWS - 1u8, "Cannot open");
        ps2_wait_key_pressed();
        return;
    }
    u32 size32 = fat_get_size(f);
    u16 max_size = (u16)__seg_extension_end - (u16)__seg_extension_begin;
    if (size32 > (u32)max_size) {
        fat_close(f);
        vga_put_text(0u8, VGA_ROWS - 1u8, "File is too large");
        ps2_wait_key_pressed();
        return;
    }
    u16 size = (u16)size32;
    u16 r = fat_read(f, (u8*)__seg_extension_begin, size);
    if (r != size) {
        fat_close(f);
        vga_put_text(0u8, VGA_ROWS - 1u8, "Read error");
        ps2_wait_key_pressed();
        return;
    }
    fat_close(f);
    extension_start();
}

u8 run_app(u8 *name) {
    u8 fd = fat_open_file(&current_dir, name);
    if (fd == FAT_BAD_DESC) {
        log_string("Cannot open");
        log_u8(last_error);
        return;
    }
    u8 r = exec_fd(fd, (u8*)0, (u8*)0, (u8*)0, (u8*)0, (u8*)0, (u8*)0, (u8*)0);
    if (!r) {
        log_string("Cannot exec");
        log_u8(last_error);
        return;
    }
}

u8 run_editor(u8 *target) {
    u8 *slash = append_path(target);
    u8 r = exec("/EDIT.APP", (u8*)current_dir_name, (u8*)0, (u8*)0, (u8*)0, (u8*)0, (u8*)0, (u8*)0);
    if (!r) {
        log_string("Cannot exec");
        log_u8(last_error);
    }
    *slash = 0u8;
}

u8 *append_path(u8 *name) {
    u8 *p = (u8*)current_dir_name;
    while (*p) {
        p += 1u8;
    }
    *p = '/';
    u8 *r = p;
    p += 1u8;
    while (*name) {
        *p = *name;
        p += 1u8;
        name += 1u8;
    }
    *p = 0u8;
    return r;
}

export u8 main() {
    ps2_init();
    fat_init();

    u8 card_present = 0u8;
    u8 fat_success = 0u8;
    u8 r;

    while (1u8) {
        vga_clear(FILE_COLOR);
        memset((u8*)vga_color_seg + VGA_OFFSET(0u8, VGA_ROWS - 1u8), STATUS_COLOR, (u16)VGA_COLS);
        if (!card_present) {
            vga_put_text(0u8, VGA_ROWS - 1u8, "Waiting for card");
            while (!card_present) {
                card_present = card_is_present();
            }
            fat_success = fat_mount();
            if (fat_success) {
                r = fat_change_dir((struct FatDirEntry*)0, (u8*)0, &current_dir);
                current_dir_name[0] = '/';
                current_dir_name[1] = 0u8;
                if (!r) {
                    vga_put_text(0u8, VGA_ROWS - 1u8, "fat_change_dir failed");
                    ps2_wait_key_pressed();
                }
            }
        } else if (!fat_success) {
            vga_put_text(0u8, VGA_ROWS - 1u8, "FAT error, remove card");
            while (card_present) {
                card_present = card_is_present();
            }
        } else {
            u8 init = 1u8;
            vga_put_text(0u8, VGA_ROWS - 1u8, "F3 - view, F4 - edit, Enter - run");
            r = load_files();
            if (r) {
                u16 max_index = display_table(0u16);
                while (1u8) {
                    u8 k = table_cursor_loop((u8)max_index, init);
                    init = 0u8;
                    card_present = card_is_present();
                    if (!card_present) {
                        card_power_off();
                        break;
                    }
                    if (k == PS2_KEY_F3) {
                        if (!(filenames[cursor_file_index].attrs & FAT_FILE_ATTR_DIRECTORY)) {
                            // print_file((u8*)filenames[cursor_file_index].name);
                            break;
                        }
                    } else if (k == PS2_KEY_F4) {
                        if (!(filenames[cursor_file_index].attrs & FAT_FILE_ATTR_DIRECTORY)) {
                            run_editor((u8*)filenames[cursor_file_index].name);
                            break;
                        }
                    } else if (k == PS2_KEY_ENTER) {
                        if (filenames[cursor_file_index].attrs & FAT_FILE_ATTR_DIRECTORY) {
                            u8 *name = (u8*)filenames[cursor_file_index].name;
                            r = fat_change_dir(&current_dir, name, &current_dir);
                            if (r) {
                                append_path(name);
                                break;
                            }
                        } else {
                            u8 fat_name[11];
                            to_fat_name((u8*)fat_name, (u8*)filenames[cursor_file_index].name);
                            if (fat_name[8] == 'E' && fat_name[9] == 'X' && fat_name[10] == 'T') {
                                run_extension((u8*)filenames[cursor_file_index].name);
                            } else if (fat_name[8] == 'A' && fat_name[9] == 'P' && fat_name[10] == 'P') {
                                run_app((u8*)filenames[cursor_file_index].name);
                            }
                            break;
                        }
                    }
                }
            }
            else
            {
                card_present = 0u8;
                card_power_off();
            }
        }
    }
}
