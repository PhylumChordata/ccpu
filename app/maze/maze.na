#include "maze.h"
#include <string.h>
#include <random.h>
#include <vga.h>

#define MEMORIZED_LENGTH 5u8

#define CHAR_EMPTY '.'
#define CHAR_PLAYER '@'
#define CHAR_KEY 'J'
#define CHAR_DOOR '>'

import s8 trap();

#define MAZE_ARRAY_SIZE (MAZE_MAX_SIDE * MAZE_MAX_SIDE)

u8 maze_data[MAZE_ARRAY_SIZE];
u8 width;
u8 height;

u8 get_wall_char(u8 top, u8 bottom, u8 left, u8 right);

export u8 maze_init(u8 w, u8 h)
{
    memset((u8*)maze_data, MAZE_WALL, (u16)w * (u16)h);
    width = w;
    height = h;
}

#define DFS_STACK_SIZE 4096

export u8 maze_dfs(u8 ux, u8 uy)
{
    u8 directions[4];
    u8 i;
    u16 index;
    s8 stack[DFS_STACK_SIZE];
    s8 *sp = (s8*)stack;

    *sp = (s8)ux;
    *(sp + 1) = (s8)uy;
    *(sp + 2) = (s8)ux;
    *(sp + 3) = (s8)uy;
    sp += 4;
    directions[0] = NORTH;
    directions[1] = EAST;
    directions[2] = SOUTH;
    directions[3] = WEST;

    while (sp != (s8*)stack)
    {
        sp += -4;
        s8 x = *sp;
        s8 y = *(sp + 1);
        s8 xl = *(sp + 2);
        s8 yl = *(sp + 3);

        index = (u16)x + (u16)y * (u16)width;
        if (maze_data[index])
            continue;
        maze_data[index] = MAZE_PASSAGE;
        index = (((u16)xl + (u16)yl * (u16)width) + index) >> (u8)1; // wall between squares
        maze_data[index] = MAZE_PASSAGE;
        xl = x;
        yl = y;

        i = (u8)4;
        while (i > (u8)1) {
            u16 n;
            u8 t;
            n = random((u16)i);
            t = directions[(s16)i - 1];
            directions[(s16)i - 1] = directions[n];
            directions[n] = t;
            i -= (u8)1;
        }

        i = (u8)0;
        while (i < (u8)4) {
            s8 xn;
            s8 yn;
            u8 dir = directions[(s16)i];

            xn = x;
            yn = y;
            if (dir == NORTH) {
                yn -= (s8)2;
            } else if (dir == EAST) {
                xn += (s8)2;
            } else if (dir == SOUTH) {
                yn += (s8)2;
            } else {
                xn -= (s8)2;
            }
            if (xn >= (s8)0 && yn >= (s8)0 && xn < (s8)width && yn < (s8)height) {
                *sp = xn;
                *(sp + 1) = yn;
                *(sp + 2) = x;
                *(sp + 3) = y;
                sp += 4;
            }
            i += (u8)1;
        }
    }
}

export u8 maze_get(s8 x, s8 y)
{
    if (x >= (s8)0 && x < (s8)width && y >= (s8)0 && y < (s8)height) {
        return maze_data[(u16)x + (u16)y * (u16)width];
    } else {
        if (x < -1s8 || y < -1s8 || x > (s8)width || y > (s8)height) {
            return MAZE_PASSAGE;
        } else {
            return MAZE_WALL;
        }
    }
}

export u8 maze_set(u8 x, u8 y, u8 v)
{
    maze_data[(u16)x + (u16)y * (u16)width] = v;
}

u8 show_one(s8 x, s8 y)
{
    u8 left = (VGA_COLS - width) >> 1u8;
    u8 top = (VGA_ROWS - height) >> 1u8;

    u8* vga_offset = (u8*)vga_char_seg + VGA_OFFSET(left + (u8)x, top + (u8)y);
    u8 center;
    center = maze_get(x, y);
    u8 c = '?';
    if (center == MAZE_WALL) {
        u8 t;
        t = maze_get(x, y - 1s8);
        u8 b;
        b = maze_get(x, y + 1s8);
        u8 l;
        l = maze_get(x - 1s8, y);
        u8 r;
        r = maze_get(x + 1s8, y);
        c = get_wall_char(t == MAZE_WALL, b == MAZE_WALL, l == MAZE_WALL, r == MAZE_WALL);
    } else if (center == MAZE_KEY) {
        c = CHAR_KEY;
    } else if (center == MAZE_EXIT) {
        c = CHAR_DOOR;
    } else if (center == MAZE_PASSAGE) {
        c = CHAR_EMPTY;
    }
    vga_set(vga_offset, c);
}

u8 show_player(u8 x, u8 y)
{
    u8 left = (VGA_COLS - width) >> 1u8;
    u8 top = (VGA_ROWS - height) >> 1u8;

    u8* vga_offset = (u8*)vga_char_seg + VGA_OFFSET(left + x, top + y);
    vga_set(vga_offset, CHAR_PLAYER);
}

export u8 maze_show_los(u8 player_x, u8 player_y)
{
    u8 t = 1u8;
    u8 b = 1u8;
    u8 l = 1u8;
    u8 r = 1u8;

    s8 v_up_x = 0s8;
    s8 v_up_y = 1s8;
    s8 v_right_x = 1s8;
    s8 v_right_y = 0s8;

    u8 e1, e2, e3, e4, e5;
    /*
    Octant cells numbering:
    6  7  8  9
    3  4  5
    1  2
    0
    */
    for (u8 octant = 0u8; octant < 8u8; octant += 1u8) {
        e1 = maze_get((s8)player_x + v_up_x, (s8)player_y + v_up_y);
        e2 = maze_get((s8)player_x + v_up_x + v_right_x, (s8)player_y + v_up_y + v_right_y);
        e3 = maze_get((s8)player_x + v_up_x * 2s8, (s8)player_y + v_up_y * 2s8);
        e4 = maze_get((s8)player_x + v_up_x * 2s8 + v_right_x, (s8)player_y + v_up_y * 2s8 + v_right_y);
        e5 = maze_get((s8)player_x + (v_up_x + v_right_x) * 2s8, (s8)player_y + (v_up_y + v_right_y) * 2s8);

        if (octant & 1u8) {
            // draw the vertical line
            show_one((s8)player_x + v_up_x, (s8)player_y + v_up_y);
            if (e1) {
                show_one((s8)player_x + v_up_x * 2s8, (s8)player_y + v_up_y * 2s8);
                if (e3) {
                    show_one((s8)player_x + v_up_x * 3s8, (s8)player_y + v_up_y * 3s8);
                }
            }

            // draw the diagonal
            show_one((s8)player_x + v_up_x + v_right_x, (s8)player_y + v_up_y + v_right_y);
            if (e2) {
                show_one((s8)player_x + 2s8 * (v_up_x + v_right_x), (s8)player_y + 2s8 * (v_up_y + v_right_y));
                if (e5) {
                    show_one((s8)player_x + 3s8 * (v_up_x + v_right_x), (s8)player_y + 3s8 * (v_up_y + v_right_y));
                }
            }
        }

        // draw 4, 7 and 8
        if (e1 || e2) {
            show_one((s8)player_x + 2s8 * v_up_x + v_right_x, (s8)player_y + 2s8 * v_up_y + v_right_y);
        }
        if (e1 && (e3 || e4)) {
            show_one((s8)player_x + 3s8 * v_up_x + v_right_x, (s8)player_y + 3s8 * v_up_y + v_right_y);
        }
        if (e2 && (e5 || (e1 && e4))) {
            show_one((s8)player_x + 3s8 * v_up_x + 2s8 * v_right_x, (s8)player_y + 3s8 * v_up_y + 2s8 * v_right_y);
        }

        // swap axes
        s8 tmp = v_right_x;
        v_right_x = v_up_x;
        v_up_x = tmp;
        tmp = v_right_y;
        v_right_y = v_up_y;
        v_up_y = tmp;
        if (octant & 1u8) {
            // rotate the direction
            v_right_x = v_up_x;
            v_right_y = v_up_y;

            v_up_x = -v_up_y;
            v_up_y = v_right_x;
        }
    }
    show_player(player_x, player_y);
}

export u8 maze_show_all(u8 player_x, u8 player_y)
{
    u8 left = (VGA_COLS - width) >> 1u8;
    u8 top = (VGA_ROWS - height) >> 1u8;

    u8* screen_offset = (u8*)vga_char_seg + VGA_OFFSET(left, top);
    u16 maze_offset = 0u16;
    for (u8 y = 0u8; y < height; y += 1u8) {
        for (u8 x = 0u8; x < width; x += 1u8) {
            u8 c = CHAR_EMPTY;
            u8 e = maze_data[maze_offset];
            if (e == MAZE_WALL) {
                u8 l, r, t, b;
                if (x == 0u8) {
                    l = 1u8;
                } else {
                    l = maze_data[maze_offset - 1u16] == MAZE_WALL;
                }
                if (x == width - 1u8) {
                    r = 1u8;
                } else {
                    r = maze_data[maze_offset + 1u16] == MAZE_WALL;
                }
                if (y == 0u8) {
                    t = 1u8;
                } else {
                    t = maze_data[maze_offset - (u16)width] == MAZE_WALL;
                }
                if (y == height - 1u8) {
                    b = 1u8;
                } else {
                    b = maze_data[maze_offset + (u16)width] == MAZE_WALL;
                }
                c = get_wall_char(t, b, l, r);
            } else if (e == MAZE_KEY) {
                c = CHAR_KEY;
            } else if (e == MAZE_EXIT) {
                c = CHAR_DOOR;
            }
            vga_set(screen_offset, c);

            maze_offset += 1u16;
            screen_offset += 1u8;
        }
        screen_offset += VGA_OFFSET_ROW;
        screen_offset -= (s16)width;
    }

    // draw frame
    if (top > 0u8) {
        screen_offset = (u8*)vga_char_seg + VGA_OFFSET(left - 1u8, top - 1u8);
        maze_offset = 0u16;
        vga_set(screen_offset, 218u8);
        screen_offset += 1u8;
        for (x = 0u8; x < width; x += 1u8) {
            c = 196u8;
            if (maze_data[maze_offset] == MAZE_WALL) {
                c = 194u8;
            }
            vga_set(screen_offset, c);
            maze_offset += 1u16;
            screen_offset += 1u8;
        }
        vga_set(screen_offset, 191u8);
    }
    if (top + height < VGA_COLS) {
        screen_offset = (u8*)vga_char_seg + VGA_OFFSET(left - 1u8, top + height);
        maze_offset = (u16)width * (u16)(height - 1u8);
        vga_set(screen_offset, 192u8);
        screen_offset += 1u8;
        for (x = 0u8; x < width; x += 1u8) {
            c = 196u8;
            if (maze_data[maze_offset] == MAZE_WALL) {
                c = 193u8;
            }
            vga_set(screen_offset, c);
            maze_offset += 1u16;
            screen_offset += 1u8;
        }
        vga_set(screen_offset, 217u8);
    }
    screen_offset = (u8*)vga_char_seg + VGA_OFFSET(left - 1u8, top);
    maze_offset = 0u16;
    for (y = 0u8; y < height; y += 1u8) {
        c = 179u8;
        if (maze_data[maze_offset] == MAZE_WALL) {
            c = 195u8;
        }
        vga_set(screen_offset, c);
        maze_offset += (u16)(width - 1u8);
        screen_offset += width + 1u8;

        c = 179u8;
        if (maze_data[maze_offset] == MAZE_WALL) {
            c = 180u8;
        }
        vga_set(screen_offset, c);
        maze_offset += 1u16;
        screen_offset += VGA_OFFSET_ROW - 1u8 - width;
    }
    vga_set((u8*)vga_char_seg + VGA_OFFSET(left + player_x, top + player_y), CHAR_PLAYER);
}

u8 get_wall_char(u8 top, u8 bottom, u8 left, u8 right)
{
    u8 index = top | (bottom << 1u8) | (left << 2u8) | (right << 3u8);
    // NSWE
    u8 *map = {
        254u8, // lone wall
        179u8, // N
        179u8, // S
        179u8, // NS

        196u8, // W
        217u8, // NW
        191u8, // SW
        180u8, // NSW

        196u8, // E
        192u8, // NE
        218u8, // SE
        195u8, // NSE

        196u8, // WE
        193u8, // NWE
        194u8, // SWE
        197u8 // NSWE
    };
    return map[index];
}

export u8 maze_forget(u8 player_x, u8 player_y, u8 direction)
{
    u8 left = (VGA_COLS - width) >> 1u8;
    u8 top = (VGA_ROWS - height) >> 1u8;
    u8 screen_x = player_x + left;
    u8 screen_y = player_y + top;
    if (direction & 1u8) {
        // EAST or WEST
        u8 col_x;
        if (direction == EAST) {
            if (screen_x < MEMORIZED_LENGTH) {
                return;
            }
            col_x = screen_x - MEMORIZED_LENGTH;
        } else {
            // WEST
            col_x = screen_x + MEMORIZED_LENGTH;
            if (col_x >= VGA_COLS) {
                return;
            }
        }
        u8 col_start;
        if (screen_y < MEMORIZED_LENGTH) {
            col_start = 0u8;
        } else {
            col_start = screen_y - MEMORIZED_LENGTH;
        }
        u8 col_end = screen_y + MEMORIZED_LENGTH;
        if (col_end > VGA_ROWS) {
            col_end = VGA_ROWS;
        }
        u8 *vga_offset = (u8*)vga_char_seg + VGA_OFFSET(col_x, col_start);
        for (; col_start < col_end; col_start += 1u8) {
            vga_set(vga_offset, 0u8);
            vga_offset += VGA_OFFSET_ROW;
        }
    } else {
        // NORTH or SOUTH
        u8 row_y;
        if (direction == NORTH) {
            if (screen_y < MEMORIZED_LENGTH) {
                return;
            }
            row_y = screen_y - MEMORIZED_LENGTH;
        } else {
            // SOUTH
            row_y = screen_y + MEMORIZED_LENGTH;
            if (row_y >= VGA_ROWS) {
                return;
            }
        }
        u8 row_start;
        if (screen_x < MEMORIZED_LENGTH) {
            row_start = 0u8;
        } else {
            row_start = screen_x - MEMORIZED_LENGTH;
        }
        u8 row_end = screen_x + MEMORIZED_LENGTH;
        if (row_end > VGA_COLS) {
            row_end = VGA_COLS;
        }
        u8 *vga_offset = (u8*)vga_char_seg + VGA_OFFSET(row_start, row_y);
        for (; row_start < row_end; row_start += 1u8) {
            vga_set(vga_offset, 0u8);
            vga_offset += VGA_OFFSET_COL;
        }
    }
}
