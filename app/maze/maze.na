#include "maze.h"
#include <string.h>
#include <random.h>
#include <display.h>

import s8 trap();

#define MAZE_ARRAY_SIZE (MAZE_MAX_SIDE * MAZE_MAX_SIDE)

u8 maze_data[MAZE_ARRAY_SIZE];
u8 width;
u8 height;

export u8 maze_init(u8 w, u8 h)
{
    memset((u8*)maze_data, MAZE_WALL, (u16)w * (u16)h);
    width = w;
    height = h;
}

#define DFS_STACK_SIZE 8192

export u8 maze_dfs(u8 ux, u8 uy)
{
    u8 directions[4];
    u8 i;
    u16 index;
    s8 stack[DFS_STACK_SIZE];
    s8 *sp = (s8*)stack;

    *sp = (s8)ux;
    *(sp + 1) = (s8)uy;
    *(sp + 2) = (s8)ux;
    *(sp + 3) = (s8)uy;
    sp += 4;
    directions[0] = NORTH;
    directions[1] = EAST;
    directions[2] = SOUTH;
    directions[3] = WEST;

    while (sp != (s8*)stack)
    {
        sp += -4;
        s8 x = *sp;
        s8 y = *(sp + 1);
        s8 xl = *(sp + 2);
        s8 yl = *(sp + 3);

        index = (u16)x + (u16)y * (u16)width;
        if (maze_data[index])
            continue;
        maze_data[index] = MAZE_PASSAGE;
        index = (((u16)xl + (u16)yl * (u16)width) + index) >> (u8)1; // wall between squares
        maze_data[index] = MAZE_PASSAGE;
        xl = x;
        yl = y;

        i = (u8)4;
        while (i > (u8)1) {
            u16 n;
            u8 t;
            n = random((u16)i);
            t = directions[(s16)i - 1];
            directions[(s16)i - 1] = directions[n];
            directions[n] = t;
            i -= (u8)1;
        }

        i = (u8)0;
        while (i < (u8)4) {
            s8 xn;
            s8 yn;
            u8 dir = directions[(s16)i];

            xn = x;
            yn = y;
            if (dir == NORTH) {
                yn -= (s8)2;
            } else if (dir == EAST) {
                xn += (s8)2;
            } else if (dir == SOUTH) {
                yn += (s8)2;
            } else {
                xn -= (s8)2;
            }
            if (xn >= (s8)0 && yn >= (s8)0 && xn < (s8)width && yn < (s8)height) {
                *sp = xn;
                *(sp + 1) = yn;
                *(sp + 2) = x;
                *(sp + 3) = y;
                sp += 4;
            }
            i += (u8)1;
        }
    }
}

export u8 maze_get(s8 x, s8 y)
{
    if (x >= (s8)0 && x < (s8)width && y >= (s8)0 && y < (s8)height) {
        return maze_data[(u16)x + (u16)y * (u16)width];
    } else {
        return MAZE_WALL;
    }
}

export u8 maze_set(u8 x, u8 y, u8 v)
{
    maze_data[(u16)x + (u16)y * (u16)width] = v;
}

u8 maze_get_with_orientation(s8 x, s8 y, u8 orientation, s8 offset_parallel, s8 offset_orthogonal)
{
    if (orientation == NORTH) {
        return maze_get(x + offset_parallel, y + offset_orthogonal);
    } else if (orientation == EAST) {
        return maze_get(x - offset_orthogonal, y + offset_parallel);
    } else if (orientation == SOUTH) {
        return maze_get(x - offset_parallel, y - offset_orthogonal);
    } else if (orientation == WEST) {
        return maze_get(x + offset_orthogonal, y - offset_parallel);
    }
}

u8 maze_print_cell(u8 center, u8 top, u8 bottom)
{
    u8 c;
    if (center == MAZE_PASSAGE) {
        if (top) {
            if (bottom) {
                c = CHAR_PASSAGE_UPDN;
            } else {
                c = CHAR_PASSAGE_UP;
            }
        } else {
            if (bottom) {
                c = CHAR_PASSAGE_DN;
            } else {
                c = CHAR_PASSAGE;
            }
        }
    } else if (center == MAZE_KEY) {
        c = CHAR_KEY;
    } else if (center == MAZE_EXIT) {
        c = CHAR_EXIT;
    } else {
        c = CHAR_WALL;
    }
    display_print_char(c);
}

u8 maze_print_player(u8 top, u8 bottom)
{
    u8 c;
    if (top) {
        if (bottom) {
            c = CHAR_PLAYER_UPDN;
        } else {
            c = CHAR_PLAYER_UP;
        }
    } else {
        if (bottom) {
            c = CHAR_PLAYER_DN;
        } else {
            c = CHAR_PLAYER;
        }
    }
    display_print_char(c);
}

export u8 maze_print(u8 x, u8 y, u8 orientation)
{
    u8 i;
    u8 length;
    s8 offset;
    u8 center;
    u8 top;
    u8 bottom;

    display_set_address((u8)0x40);

    if (orientation & (u8)1)
        length = height;
    else
        length = width;

    if (length < DISPLAY_WIDTH - (u8)2) {
        s8 left_offset;
        left_offset = (s8)((DISPLAY_WIDTH - length) >> (u8)1) - (s8)1;
        if (orientation == NORTH)
            offset = -(s8)x - left_offset;
        else if (orientation == EAST)
            offset = -(s8)y - left_offset;
        else if (orientation == SOUTH)
            offset = (s8)x - left_offset - (s8)length + (s8)1;
        else if (orientation == WEST)
            offset = (s8)y - left_offset - (s8)length + (s8)1;
        i = (u8)0;
        while (i < (u8)16) {
            top = maze_get_with_orientation((s8)x, (s8)y, orientation, offset, -(s8)1);
            bottom = maze_get_with_orientation((s8)x, (s8)y, orientation, offset, (s8)1);
            if (offset != (s8)0) {
                center = maze_get_with_orientation((s8)x, (s8)y, orientation, offset, (s8)0);
                maze_print_cell(center, top, bottom);
            } else {
                maze_print_player(top, bottom);
            }
            i += (u8)1;
            offset += (s8)1;
        }
    } else {
        display_print("not implemented");
    }
}

export u8 maze_load_cgram() {
    // Passage with no walls - space
    // Passage with a wall below - 0x0e
    // Passage with a wall above - 0x08
    // Passage with two walls - 0x09
    // Player in an empty passage - 0x0a
    // Player in a passage with a wall below - 0x0b
    // Player in a passage with a wall above - 0x0c
    // Player in a passage with two walls - 0x0d
    // Key - 0xd2
    // Exit - 0xfc
    // Wall - 0xff
    display_load_cg_ram({
        // Passage with a wall above - 0x08
        0b11111u8,
        0b00000u8,
        0b00000u8,
        0b00000u8,
        0b00000u8,
        0b00000u8,
        0b00000u8,
        0b00000u8,
        // Passage with two walls - 0x09
        0b11111u8,
        0b00000u8,
        0b00000u8,
        0b00000u8,
        0b00000u8,
        0b00000u8,
        0b00000u8,
        0b11111u8,
        // Player in an empty passage - 0x0a
        0b00000u8,
        0b00000u8,
        0b00100u8,
        0b01110u8,
        0b00100u8,
        0b01010u8,
        0b00000u8,
        0b00000u8,
        // Player in a passage with a wall below - 0x0b
        0b00000u8,
        0b00000u8,
        0b00100u8,
        0b01110u8,
        0b00100u8,
        0b01010u8,
        0b00000u8,
        0b11111u8,
        // Player in a passage with a wall above - 0x0c
        0b11111u8,
        0b00000u8,
        0b00100u8,
        0b01110u8,
        0b00100u8,
        0b01010u8,
        0b00000u8,
        0b00000u8,
        // Player in a passage with two walls - 0x0d
        0b11111u8,
        0b00000u8,
        0b00100u8,
        0b01110u8,
        0b00100u8,
        0b01010u8,
        0b00000u8,
        0b11111u8,
        // Passage with a wall below - 0x0e
        0b00000u8,
        0b00000u8,
        0b00000u8,
        0b00000u8,
        0b00000u8,
        0b00000u8,
        0b00000u8,
        0b11111u8,
        // Unused - 0x0f
        0b00000u8,
        0b00000u8,
        0b00000u8,
        0b00000u8,
        0b00000u8,
        0b00000u8,
        0b00000u8,
        0b00000u8
    });
}
