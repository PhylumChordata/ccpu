#include "game.h"
#include <random.h>
#include <display.h>
#include "maze.h"

u8 game_side;

u8 player_x;
u8 player_y;

u8 has_key;
u8 on_exit;

u8 orientation;

import u8 trap();

export u8 game_init(u8 side) {
    game_side = side;
    maze_init(side, side);
    maze_dfs(0u8, 0u8);
    player_x = 0u8;
    player_y = 0u8;

    has_key = 0u8;
    on_exit = 0u8;
    orientation = NORTH;

    u8 exit_y = 0u8;
    u8 exit_x = 0u8;
    u16 rand_range = ((u16)side >> 1u) + 1u;
    u16 r;
    while (!(exit_x || exit_y)) {
        r = random(rand_range);
        exit_x = (u8)r << 1u;
        r = random(rand_range);
        exit_y = (u8)r << 1u;
        trap();
    }

    u8 key_y = 0u8;
    u8 key_x = 0u8;
    while (!(key_x || key_y) || (exit_x == key_x && exit_y == key_y)) {
        r = random(rand_range);
        key_x = (u8)r << 1u;
        r = random(rand_range);
        key_y = (u8)r << 1u;
    }

    maze_set(exit_x, exit_y, MAZE_EXIT);
    maze_set(key_x, key_y, MAZE_KEY);
}

export u8 game_print_state() {
    display_set_address(DISPLAY_LINE_1);
    display_print_byte(player_x);
    display_print_char(' ');
    display_print_byte(player_y);
    if (has_key) {
        display_print_char(' ');
        display_print_char(CHAR_KEY);
    } else if (on_exit) {
        display_print(" NO KEY");
    } else {
        display_print("       ");
    }

    display_set_address(DISPLAY_LINE_1 + 14u8);
    display_print_char('N');
    if (orientation == NORTH) {
        display_print_char('^');
    } else if (orientation == EAST) {
        display_print_char('<');
    } else if (orientation == SOUTH) {
        display_print_char('v');
    } else {
        display_print_char('>');
    }

    display_set_address(DISPLAY_LINE_2);
    maze_print(player_x, player_y, orientation);
}

export u8 game_rotate_cw() {
    orientation = (orientation - 1u8) & 3u8;
    return 1u8;
}

export u8 game_rotate_ccw() {
    orientation = (orientation + 1u8) & 3u8;
    return 1u8;
}

u8 move(s8 xn, s8 yn) {
    u8 v;
    v = maze_get(xn, yn);
    if (!v) {
        return RESULT_NO;
    }
    player_x = (u8)xn;
    player_y = (u8)yn;
    on_exit = 0u8;
    if (v == MAZE_KEY) {
        has_key = 1u8;
        maze_set((u8)xn, (u8)yn, MAZE_PASSAGE);
    } else if (v == MAZE_EXIT) {
        on_exit = 1u8;
        if (has_key) {
            return RESULT_EXIT;
        }
    }
    return RESULT_YES;
}

export u8 game_move_left() {
    s8 xn = (s8)player_x, yn = (s8)player_y;
    if (orientation == NORTH) {
        xn -= 1s8;
    } else if (orientation == EAST) {
        yn -= 1s8;
    } else if (orientation == SOUTH) {
        xn += 1s8;
    } else {
        yn += 1s8;
    }
    return move(xn, yn);
}

export u8 game_move_right() {
    s8 xn = (s8)player_x, yn = (s8)player_y;
    if (orientation == NORTH) {
        xn += 1s8;
    } else if (orientation == EAST) {
        yn += 1s8;
    } else if (orientation == SOUTH) {
        xn -= 1s8;
    } else {
        yn -= 1s8;
    }
    return move(xn, yn);
}

export u8 game_move_up() {
    s8 xn = (s8)player_x, yn = (s8)player_y;
    if (orientation == NORTH) {
        yn -= 1s8;
    } else if (orientation == EAST) {
        xn += 1s8;
    } else if (orientation == SOUTH) {
        yn += 1s8;
    } else {
        xn -= 1s8;
    }
    return move(xn, yn);
}

export u8 game_move_down() {
    s8 xn = (s8)player_x, yn = (s8)player_y;
    if (orientation == NORTH) {
        yn += 1s8;
    } else if (orientation == EAST) {
        xn -= 1s8;
    } else if (orientation == SOUTH) {
        yn -= 1s8;
    } else {
        xn += 1s8;
    }
    return move(xn, yn);
}
