#include "game.h"
#include <random.h>
#include <vga.h>
#include "maze.h"

u8 player_x;
u8 player_y;

u8 has_key;
u8 on_exit;

import u8 trap();

export u8 game_init(u8 side) {
    u8 width = side;
    u8 height = side;
    if (height > VGA_ROWS) {
        height = VGA_ROWS - 1u8;
    }
    maze_init(width, height);
    maze_dfs(0u8, 0u8);
    player_x = 0u8;
    player_y = 0u8;

    has_key = 0u8;
    on_exit = 0u8;

    u8 exit_y = 0u8;
    u8 exit_x = 0u8;
    u16 rand_range_w = ((u16)width >> 1u) + 1u;
    u16 rand_range_h = ((u16)height >> 1u) + 1u;
    u16 r;
    while (!(exit_x || exit_y)) {
        r = random(rand_range_w);
        exit_x = (u8)r << 1u;
        r = random(rand_range_h);
        exit_y = (u8)r << 1u;
        trap();
    }

    u8 key_y = 0u8;
    u8 key_x = 0u8;
    while (!(key_x || key_y) || (exit_x == key_x && exit_y == key_y)) {
        r = random(rand_range_w);
        key_x = (u8)r << 1u;
        r = random(rand_range_h);
        key_y = (u8)r << 1u;
    }

    maze_set(exit_x, exit_y, MAZE_EXIT);
    maze_set(key_x, key_y, MAZE_KEY);

    vga_clear(COLOR(COLOR_GRAY, COLOR_BLACK));
    // maze_show_all(player_x, player_y);
    maze_show_los(player_x, player_y);
}

export u8 game_print_state() {
}

u8 move(s8 xn, s8 yn, u8 direction) {
    u8 v;
    v = maze_get(xn, yn);
    if (!v) {
        return RESULT_NO;
    }
    // maze_show_player_move(player_x, player_y, (u8)xn, (u8)yn);
    maze_show_los((u8)xn, (u8)yn);
    maze_forget((u8)xn, (u8)yn, direction);
    player_x = (u8)xn;
    player_y = (u8)yn;
    on_exit = 0u8;
    if (v == MAZE_KEY) {
        has_key = 1u8;
        maze_set((u8)xn, (u8)yn, MAZE_PASSAGE);
    } else if (v == MAZE_EXIT) {
        on_exit = 1u8;
        if (has_key) {
            return RESULT_EXIT;
        }
    }
    return RESULT_YES;
}

export u8 game_move_left() {
    s8 xn = (s8)player_x, yn = (s8)player_y;
    xn -= 1s8;
    return move(xn, yn, WEST);
}

export u8 game_move_right() {
    s8 xn = (s8)player_x, yn = (s8)player_y;
    xn += 1s8;
    return move(xn, yn, EAST);
}

export u8 game_move_up() {
    s8 xn = (s8)player_x, yn = (s8)player_y;
    yn -= 1s8;
    return move(xn, yn, SOUTH);
}

export u8 game_move_down() {
    s8 xn = (s8)player_x, yn = (s8)player_y;
    yn += 1s8;
    return move(xn, yn, NORTH);
}

export u8 game_show_all() {
    maze_show_all(player_x, player_y);
}
