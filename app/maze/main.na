#include <keyboard.h>
#include <entropy.h>
#include <random.h>
#include <vga.h>
#include <ps2keyboard.h>
#include "maze.h"
#include "game.h"
#include "../frame.h"

import u8 trap();

u8 print_decimal(u8 col, u8 row, u8 x) {
    u8* vga_offset = (u8*)vga_char_seg + VGA_OFFSET(col, row);
    if (x >= 100u8) {
        *vga_offset = '0' + x / 100u8;
        x = x % 100u8;
        vga_offset[1u8] = '0' + x / 10u8;
        vga_offset[2u8] = '0' + x % 10u8;
    } else if (x >= 10u8) {
        *vga_offset = '0' + x / 10u8;
        vga_offset[1u8] = '0' + x % 10u8;
    } else {
        *vga_offset = '0' + x;
    }
}

u8 print_level_greeting(u8 n) {
    vga_clear(COLOR(COLOR_WHITE, COLOR_BLUE));

    vga_put_text(34u8, 15u8, "Generating");
    print_decimal(34u8 + 11u8, 15u8, n);
    display_frame(32u8, 13u8, 34u8 + 11u8 + 2u8 + 2u8, 17u8);
}

u8 print_success() {
    for (u8* offset = (u8*)vga_color_seg; offset != (u8*)vga_color_seg + VGA_OFFSET(VGA_COLS, VGA_ROWS); offset += 1u8) {
        *offset = COLOR(COLOR_WHITE, COLOR_GREEN);
    }
}

u8 maze_loop();

export u8 maze_main() {
    srand(entropy);

    maze_loop();
}

u8 maze_loop() {
    u8 n = (u8)3;
    u8 k, r;

    while (n < (u8)MAZE_MAX_WIDTH) {
        print_level_greeting(n);
        game_init(n);
        game_print_state();
        trap();
        while (1u8) {
            k = keyboard_get_if_pressed();
            if (k == KEY_ESC) {
                return;
            } else if (k == KEY_RIGHT) {
                r = game_move_right();
            } else if (k == KEY_LEFT) {
                r = game_move_left();
            } else if (k == KEY_8 || k == KEY_UP) {
                r = game_move_up();
            } else if (k == KEY_0 || k == KEY_DOWN) {
                r = game_move_down();
            } else if (k == KEY_F2) {
                break;
            } else if (k == KEY_F1) {
                n -= 4u8;
                break;
            } else if (k == KEY_HASH) {
                game_show_all();
            } else {
                r = 0u8;
            }
            if (r == RESULT_EXIT) {
                break;
            }

            k = ps2_get_key_event();
            if (k == PS2_KEY_ESCAPE) {
                return;
            } else if (k == PS2_KEY_RIGHT) {
                r = game_move_right();
            } else if (k == PS2_KEY_LEFT) {
                r = game_move_left();
            } else if (k == PS2_KEY_UP) {
                r = game_move_up();
            } else if (k == PS2_KEY_DOWN) {
                r = game_move_down();
            } else if (k == PS2_KEY_PAGEDOWN) {
                break;
            } else if (k == PS2_KEY_PAGEUP) {
                n -= 4u8;
                break;
            } else if (k == PS2_KEY_F1) {
                game_show_all();
            } else {
                r = 0u8;
            }
            if (r == RESULT_EXIT) {
                break;
            }
        }
        print_success();
        while (1u8) {
            k = keyboard_get_if_pressed();
            if (k != KEY_NO_KEY) {
                break;
            }
            k = ps2_get_key_event();
            if (k != PS2_KEY_NONE && !(k & PS2_KEY_RELEASE)) {
                break;
            }
        }
        n += 2u8;
    }
}
