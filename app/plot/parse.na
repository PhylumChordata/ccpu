#include "parse.h"
#include "pool.h"
#include <string.h>
#include <vga_console.h>

#define NODE_NUMBER 0u8
#define NODE_VAR 1u8
#define NODE_OP 2u8

struct Node {
    u8 type;
    u8 _align;
    u8 data[30u8];
};

struct Op {
    struct Node *left;
    struct Node *right;
    u8 op;
};

struct Node *parse_root;

#define STATE_LEFT 0u8
#define STATE_RIGHT 1u8
#define STATE_OP 2u8

export u8 parse(u8 *str) {
    u8 *chunk;
    u8 state = STATE_LEFT;

    struct Node *left = (struct Node *)0;
    struct Node *right;
    struct Op *op;
    u8 sign = 0u8;

    while (1u8) {
        u8 tok = tok_next(&str);

        if (tok == TOK_NUMBER) {
            vga_console_print("number");
            bcdf_normalize_arg.sign = sign;
            sign = 0u8;
            bcdf_normalize();
            if (state == STATE_LEFT) {
                chunk = pool_alloc();
                if ((u16)chunk == 0u16) {
                    vga_console_print(" out of chunks");
                    return 0u8;
                }
                left = (struct Node *)chunk;
                left->type = NODE_NUMBER;
                memcpy((u8*)left->data, (u8*)&bcdf_normalize_arg, sizeof(struct Bcdf));
                state = STATE_OP;
            } else if (state == STATE_RIGHT) {
                chunk = pool_alloc();
                if ((u16)chunk == 0u16) {
                    vga_console_print(" out of chunks");
                    return 0u8;
                }
                right = (struct Node *)chunk;
                right->type = NODE_NUMBER;
                memcpy((u8*)right->data, (u8*)&bcdf_normalize_arg, sizeof(struct Bcdf));
                state = STATE_OP;
                op->right = right;
            } else {
                return 0u8;
            }
        } else if (tok == TOK_END) {
            vga_console_print("end");
            if (state == STATE_OP) {
                parse_root = left;
                return 1u8;
            } else {
                return 0u8;
            }
        } else if (tok == TOK_ERROR) {
            return 0u8;
        } else if (tok == '+' || tok == '-' || tok == '*' || tok == '/') {
            vga_console_print("op");
            if (state == STATE_OP) {
                chunk = pool_alloc();
                if ((u16)chunk == 0u16) {
                    vga_console_print(" out of chunks");
                    return 0u8;
                }
                op = (struct Op *)((struct Node *)chunk)->data;
                op->left = left;
                op->op = tok;
                left = (struct Node *)chunk;
                left->type = NODE_OP;
                state = STATE_RIGHT;
            } else if (tok == '+') {
                // sign stays
            } else if (tok == '-') {
                sign = ~sign;
            } else {
                return 0u8;
            }
        } else if (tok == 'x' || tok == 'y') {
            vga_console_print("var");
            if (sign) {
                return 0u8;
            }
            if (state == STATE_LEFT) {
                chunk = pool_alloc();
                if ((u16)chunk == 0u16) {
                    vga_console_print(" out of chunks");
                    return 0u8;
                }
                left = (struct Node *)chunk;
                left->type = NODE_VAR;
                left->data[0] = tok - 'x';
                state = STATE_OP;
            } else if (state == STATE_RIGHT) {
                chunk = pool_alloc();
                if ((u16)chunk == 0u16) {
                    vga_console_print(" out of chunks");
                    return 0u8;
                }
                right = (struct Node *)chunk;
                right->type = NODE_VAR;
                right->data[0] = tok - 'x';
                state = STATE_OP;
                op->right = right;
            } else {
                return 0u8;
            }
        }
        vga_console_newline();
    }
}

u8 print(struct Node *root, u8 level) {
    u8 t = root->type;
    for (u8 i = 0u8; i != level; i += 1u8) {
        vga_console_putchar(' ');
    }
    if (t == NODE_NUMBER) {
        vga_console_print_bcdf(*(struct Bcdf *)root->data, 16u8);
    } else if (t == NODE_VAR) {
        vga_console_putchar('x' + root->data[0]);
    } else if (t == NODE_OP) {
        struct Op *op = (struct Op *)root->data;
        vga_console_putchar(op->op);
        vga_console_newline();
        print(op->left, level + 1u8);
        print(op->right, level + 1u8);
    } else {
        vga_console_print("WTF");
    }
    vga_console_newline();
}

export u8 print_tree() {
    print(parse_root, 0u8);
}
