#include <vga.h>
#include <line_edit.h>
#include <ps2keyboard.h>
#include <qp/quasipixel.h>
#include <string.h>
#include "tokenizer.h"
#include "expr.h"

#define EXPR_COLOR COLOR(COLOR_GRAY, COLOR_BLACK)
#define ERROR_COLOR COLOR(COLOR_RED, COLOR_BLACK)

u8 line_buf[64];

u8 error(u8 *text) {
    memset((u8*)vga_color_seg + VGA_OFFSET(0u8, VGA_ROWS - 1u8), ERROR_COLOR, (u16)VGA_COLS);
    vga_put_text(0u8, VGA_ROWS - 1u8, text);
    ps2_wait_key_pressed();   
}

u8 plot() {
    struct Bcdf vars[2];
    struct Bcdf delta;
    struct Bcdf left;
    struct Bcdf top;
    BCDF_SET_ZERO(&delta);
    BCDF_SET_ZERO(&left);
    BCDF_SET_ZERO(&top);
    BCDF_SET_ZERO(vars + 0u8);
    BCDF_SET_ZERO(vars + 1u8);

    // left = -4.0
    left.man[0] = 4u8;
    left.sign = 0xffu8;
    // top = 2.9
    top.man[0] = 2u8;
    top.man[1] = 9u8;

    // delta = 0.1
    delta.man[0] = 1u8;
    delta.exp = -1s8;

    memcpy((u8*)((struct Bcdf *)vars + 1u8), (u8*)&top, sizeof(struct Bcdf));
    for (u8 y = 0u8; y != QP_HEIGHT - 2u8; y += 1u8) {
        memcpy((u8*)((struct Bcdf *)vars + 0u8), (u8*)&left, sizeof(struct Bcdf));
        for (u8 x = 0u8; x != QP_WIDTH; x += 1u8) {
            struct Bcdf *result = evaluate((struct Bcdf *)vars);
            qp_set_and_render(x, y, result->sign);
            BCDF_SET_A((struct Bcdf *)vars + 0u8);
            BCDF_SET_B(&delta);
            bcdf_add();
            BCDF_GET_R((struct Bcdf *)vars + 0u8);
        }
        BCDF_SET_A((struct Bcdf *)vars + 1u8);
        BCDF_SET_B(&delta);
        bcdf_sub();
        BCDF_GET_R((struct Bcdf *)vars + 1u8);
    }
}

export u8 main() {
    ps2_init();
    qp_init(COLOR_GREEN, COLOR_RED);

    while (1u8) {
        memset((u8*)vga_color_seg + VGA_OFFSET(0u8, VGA_ROWS - 1u8), EXPR_COLOR, (u16)VGA_COLS);
        memset((u8*)vga_char_seg + VGA_OFFSET(0u8, VGA_ROWS - 1u8), 0u8, (u16)VGA_COLS);
        vga_put_text(0u8, VGA_ROWS - 1u8, "0 = ");
        line_buf[0] = 0u8;
        u8 r = line_edit((u8*)line_buf, (u8)sizeof(line_buf) - 1u8, 4u8, VGA_ROWS - 1u8, EXPR_COLOR);
        if (!r) {
            return;
        }
        r = parse((u8*)line_buf);
        if (r != PARSE_SUCCESS) {
            error("Error parsing");
            continue;
        }
        plot();
    }
}
