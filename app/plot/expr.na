#include "expr.h"
#include <string.h>
#include <vga_console.h>

#define MAX_NODES 32u8
#define MAX_OPERATORS 32u8

#define NODE_NUMBER 0u8
#define NODE_VAR 1u8
#define NODE_OP 2u8

#define PRIO_LBRACE 0u8

struct Node {
    u8 type;
    u8 data[31u8];
};

struct Op {
    u8 type;
    u8 op;
    u8 prio;
    u8 _align;
};

struct Number {
    u8 type;
    u8 _align;
    struct Bcdf value;
};

struct Var {
    u8 type;
    u8 index;
};


struct Node rpn[MAX_NODES];
struct Op op_stack[MAX_OPERATORS];

u8 rpn_index;
u8 op_stack_index;

#define STATE_LEFT 0u8
#define STATE_RIGHT 1u8
#define STATE_OP 2u8

#define IS_OP(tok) ((tok) == '+' || (tok) == '-' || (tok) == '*' || (tok) == '/' || (tok) == '(')

u8 get_prio(u8 op) {
    if (op == '(') {
        return PRIO_LBRACE;
    } else if (op == '+' || op == '-') {
        return 1u8;
    } else {
        return 2u8;
    }
}

// Dijkstras shunting-yard algorithm
export u8 parse(u8 *str) {
    rpn_index = 0u8;
    op_stack_index = 0u8;
    while (1u8) {
        u8 token = tok_next(&str);
        if (token == TOK_END) {
            break;
        } else if (token == TOK_NUMBER) {
            bcdf_normalize();
            struct Number *num = (struct Number *)(rpn + rpn_index);
            num->type = NODE_NUMBER;
            memcpy((u8*)&num->value, (u8*)&bcdf_normalize_arg, sizeof(struct Bcdf));
            rpn_index += 1u8;
            if (rpn_index == MAX_NODES) {
                return PARSE_ERR_OUT_OF_NODES;
            }
        } else if (token == 'x' || token == 'y') {
            struct Var *v = (struct Var *)(rpn + rpn_index);
            v->type = NODE_VAR;
            v->index = token - 'x';
            rpn_index += 1u8;
            if (rpn_index == MAX_NODES) {
                return PARSE_ERR_OUT_OF_NODES;
            }
        } else if (IS_OP(token)) {
            u8 new_prio = get_prio(token);
            if (new_prio != PRIO_LBRACE) {
                while (op_stack_index) {
                    u8 prio = op_stack[op_stack_index - 1u8].prio;
                    if (prio < new_prio) {
                        break;
                    }
                    op_stack_index -= 1u8;
                    *(struct Op *)(rpn + rpn_index) = op_stack[op_stack_index];
                    rpn_index += 1u8;
                    if (rpn_index == MAX_NODES) {
                        return PARSE_ERR_OUT_OF_NODES;
                    }
                }
            }
            op_stack[op_stack_index].type = NODE_OP;
            op_stack[op_stack_index].op = token;
            op_stack[op_stack_index].prio = get_prio(token);
            op_stack_index += 1u8;
            if (op_stack_index == MAX_OPERATORS) {
                return PARSE_ERR_OUT_OF_OPERATORS;
            }
        } else if (token == ')') {
            while (1u8) {
                if (op_stack_index == 0u8) {
                    return PARSE_ERR_BRACKETS;
                }
                op_stack_index -= 1u8;
                if (op_stack[op_stack_index].op == '(') {
                    break;
                }
                *(struct Op *)(rpn + rpn_index) = op_stack[op_stack_index];
                rpn_index += 1u8;
                if (rpn_index == MAX_NODES) {
                    return PARSE_ERR_OUT_OF_NODES;
                }
            }
        }
    }
    while (op_stack_index) {
        op_stack_index -= 1u8;
        if (op_stack[op_stack_index].op == '(') {
            return PARSE_ERR_BRACKETS;
        }
        *(struct Op *)(rpn + rpn_index) = op_stack[op_stack_index];
        rpn_index += 1u8;
        if (rpn_index == MAX_NODES) {
            return PARSE_ERR_OUT_OF_NODES;
        }
    }
    // check RPN
    u8 result_counter = 0u8;
    for (u8 i = 0u8; i != rpn_index; i += 1u8) {
        u8 t = rpn[i].type;
        if (t == NODE_NUMBER || t == NODE_VAR) {
            result_counter += 1u8;
        } else if (t == NODE_OP) {
            if (result_counter < 2u8) {
                return PARSE_ERR_TOO_FEW_OPERANDS;
            }
            result_counter -= 1u8;
        } else {
            return PARSE_ERR_UNKNOWN;
        }
    }
    if (result_counter == 1u8) {
        return PARSE_SUCCESS;
    } else {
        return PARSE_ERR_TOO_MANY_OPERANDS;
    }
}

export struct Bcdf *evaluate(struct Bcdf *vars) {
    struct Bcdf eval_stack[MAX_NODES];
    u8 eval_index = 0u8;
    for (u8 i = 0u8; i != rpn_index; i += 1u8) {
        u8 t = rpn[i].type;
        if (t == NODE_NUMBER) {
            memcpy((u8*)(eval_stack + eval_index), (u8*)&((struct Number *)(rpn + i))->value, sizeof(struct Bcdf));
            eval_index += 1u8;
        } else if (t == NODE_VAR) {
            u8 var_index = ((struct Var *)(rpn + i))->index;
            memcpy((u8*)(eval_stack + eval_index), (u8*)(vars + var_index), sizeof(struct Bcdf));
            eval_index += 1u8;
        } else {
            eval_index -= 1u8;
            BCDF_SET_B(eval_stack + eval_index);
            eval_index -= 1u8;
            BCDF_SET_A(eval_stack + eval_index);
            u8 op = ((struct Op *)(rpn + i))->op;
            if (op == '+') {
                bcdf_add();
            } else if (op == '-') {
                bcdf_sub();
            } else if (op == '*') {
                bcdf_mul();
            } else if (op == '/') {
                bcdf_div();
            }
            BCDF_GET_R(eval_stack + eval_index);
            eval_index += 1u8;
        }
    }
    return (struct Bcdf *)eval_stack;
}

export u8 print_tree() {
    for (u8 i = 0u8; i != rpn_index; i += 1u8) {
        u8 t = rpn[i].type;
        if (t == NODE_OP) {
            vga_console_putchar(((struct Op *)(rpn + i))->op);
        } else if (t == NODE_VAR) {
            vga_console_putchar(((struct Var *)(rpn + i))->index + 'x');
        } else if (t == NODE_NUMBER) {
            vga_console_print_bcdf(((struct Number *)(rpn + i))->value, 5u8);
        }
        vga_console_putchar(' ');
    }
}
